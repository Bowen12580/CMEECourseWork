species.name <- "Quercus robur" #You can alo use single quotes
species.name
mode(species.name)
paste('Quersuc','robur')
paste("Quercus", "robur", sep = " ")
paste("Quercus", "robur",sep = "") #Get rid of space
species.name <- "Quercus robur" #You can alo use single quotes
species.name
mode(species.name)
paste('Quersuc','robur')
paste("Quercus", "robur", sep = " ")
paste("Quercus", "robur",sep = "") #Get rid of space
source('boilerplate.R')
# Checks if a number is prime
is.prime <- function(n) {
if (n==0) {
return(paste(n,'is a zero!'))
} else if (n==1) {
return(paste(n,'is just a unit!'))
}
ints <- 2:(n-1)
if (all(n%%ints!=0)) {
return(paste(n,'is a prime!'))
} else {
return(paste(n,'is a composite!'))
}
}
is.prime(3)
M <- matrix(runif(1000000),1000,1000)
SumAllElements <- function(M) {
Dimensions <- dim(M)
Tot <- 0
for (i in 1:Dimensions[1]) {
for (j in 1:Dimensions[2]) {
Tot <- Tot + M[i,j]
}
}
return (Tot)
}
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))
print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
M <- matrix(runif(1000000),1000,1000)
SumAllElements <- function(M) {
Dimensions <- dim(M)
Tot <- 0
for (i in 1:Dimensions[1]) {
for (j in 1:Dimensions[2]) {
Tot <- Tot + M[i,j]
}
}
return (Tot)
}
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))
print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
M <- matrix(runif(1000000),1000,1000)
SumAllElements <- function(M) {
Dimensions <- dim(M)
Tot <- 0
for (i in 1:Dimensions[1]) {
for (j in 1:Dimensions[2]) {
Tot <- Tot + M[i,j]
}
}
return (Tot)
}
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))
print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
a <- 1.0
class(a)
M <- matrix(runif(1000000),1000,1000)
SumAllElements <- function(M) {
Dimensions <- dim(M)
Tot <- 0
for (i in 1:Dimensions[1]) {
for (j in 1:Dimensions[2]) {
Tot <- Tot + M[i,j]
}
}
return (Tot)
}
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))
print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))
set.seed(1345) # again, to get the same result for illustration
popn <- rnorm(50)
hist(popn)
n <- 100 # sample size for each experiment
num <- 10000 # Number of times to rerun the experiment
print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))
print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))
print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))
print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))
print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))
######### Functions ##########
## A function to take a sample of size n from a population "popn" and return its mean
myexperiment <- function(popn,n) {
pop_sample <- sample(popn, n, replace = FALSE)
return(mean(pop_sample))
}
## Calculate means using a FOR loop on a vector without preallocation:
loopy_sample1 <- function(popn, n, num) {
result1 <- vector() #Initialize empty vector of size 1
for(i in 1:num) {
result1 <- c(result1, myexperiment(popn, n))
}
return(result1)
}
## To run "num" iterations of the experiment using a FOR loop on a vector with preallocation:
loopy_sample2 <- function(popn, n, num) {
result2 <- vector(,num) #Preallocate expected size
for(i in 1:num) {
result2[i] <- myexperiment(popn, n)
}
return(result2)
}
## To run "num" iterations of the experiment using a FOR loop on a list with preallocation:
loopy_sample3 <- function(popn, n, num) {
result3 <- vector("list", num) #Preallocate expected size
for(i in 1:num) {
result3[[i]] <- myexperiment(popn, n)
}
return(result3)
}
## To run "num" iterations of the experiment using vectorization with lapply:
lapply_sample <- function(popn, n, num) {
result4 <- lapply(1:num, function(i) myexperiment(popn, n))
return(result4)
}
## To run "num" iterations of the experiment using vectorization with sapply:
sapply_sample <- function(popn, n, num) {
result5 <- sapply(1:num, function(i) myexperiment(popn, n))
return(result5)
}
lapply(1:15, function(i) doit(popn))
lapply(1:15, function(i) doit(popn))
load("/home/bd623/Documents/CMEECourseWork/week3/data/KeyWestAnnualMeanTemperature.RData")
q
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
  # Runs a simulation of the Ricker model
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return (N)
}
plot(Ricker(generations=10), type="l")
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
  N[1, ] <- p0
  for (pop in 1:length(p0)) { #loop through the populations
    for (yr in 2:numyears){ #for each pop, loop through the years
      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)
}
# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance: 
# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))
rm(list = ls()) #清空环境中的所有变量
# 定义函数stochrick，用于模拟随机Ricker方程
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100) {
  
  # 初始化矩阵N
  N <- matrix(NA, numyears, length(p0))
  
  # 将初始个体数存储在第一年的矩阵行中
  N[1, ] <- p0
  
  # 循环遍历每个种群
  for (pop in 1:length(p0)) {
    
    # 循环遍历每一年
    for (yr in 2:numyears) {
      
      # 模拟随机Ricker方程，添加来自正态分布的一个波动
      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma))
      
    }
    
  }
  
  # 返回矩阵N
  return(N)
  
}
# 定义函数stochrickvect，将stochrick函数向量化以提高性能
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100) {
  
  # 初始化矩阵N
  N <- matrix(NA, numyears, length(p0))
  
  # 将初始个体数存储在第一年的矩阵行中
  N[1, ] <- p0
  
  # 使用矩阵运算模拟随机Ricker方程，添加来自正态分布的波动
  for (yr in 2:numyears) {
    N[yr, ] <- N[yr-1, ] * exp(r * (1 - N[yr - 1, ] / K) + rnorm(length(p0), 0, sigma))
  }
  
  # 返回矩阵N
  return(N)
}
# 调用stochrickvect函数并输出运行时间
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
q
q()
# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")

# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)

# set permutations
num_permutations <- 1000

# create a vector to save the random cor
random_corrs <- numeric(num_permutations)

# 
for (i in 1:num_permutations) {
  #
  shuffled_temps <- sample(ats$Temp)
  
  # 
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}

# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations

# print p
print(paste("p value is:", p_value))

# explain in the pdf
pdf("../results/results.pdf", width = 8.27, height = 11.69)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Tem", main = "Key West, Florida average tem ")
abline(lm(ats$Temp ~ ats$Year), col = "red")
text(1900, 26, paste("观测相关系数:", round(observed_corr, 2)))
text(1900, 25.5, paste("近似p值:", round(p_value, 4)))
dev.off()

ls
# Make sure now we are in the 'week3/code' directory

rm(list=ls())

load("../data/KeyWestAnnualMeanTemperature.RData")

ls()
class(ats)
head(ats)
plot(ats)
ls()

class(ats)
head(ats)
class(ats)
plot(ats)
head(ats)
# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")

# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)

# set permutations
num_permutations <- 1000

# create a vector to save the random cor
random_corrs <- numeric(num_permutations)

# 
for (i in 1:num_permutations) {
  #
  shuffled_temps <- sample(ats$Temp)
  
  # 
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}

# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations

# print p
print(paste("p value is:", p_value))

# explain in the pdf
pdf("../results/results.pdf", width = 8.27, height = 11.69)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Tem", main = "Key West, Florida average tem ")
abline(lm(ats$Temp ~ ats$Year), col = "red")
text(1900, 26, paste("观测相关系数:", round(observed_corr, 2)))
text(1900, 25.5, paste("近似p值:", round(p_value, 4)))
dev.off()

# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")

# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)

# set permutations
num_permutations <- 1000

# create a vector to save the random cor
random_corrs <- numeric(num_permutations)

# 
for (i in 1:num_permutations) {
  #
  shuffled_temps <- sample(ats$Temp)
  
  # 
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}

# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations

# print p
print(paste("p value is:", p_value))

# explain in the pdf
pdf("../results/results.pdf", width = 8.27, height = 11.69)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Tem", main = "Key West, Florida average tem ")
abline(lm(ats$Temp ~ ats$Year), col = "red")
text(1900, 26, paste("Observed correlation coefficient:", round(observed_corr, 2)))
text(1900, 25.5, paste("Approximate p_value:", round(p_value, 4)))
dev.off()

# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")
# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)
# set permutations
num_permutations <- 1000
# create a vector to save the random cor
random_corrs <- numeric(num_permutations)
# use permutation test
for (i in 1:num_permutations) {
  # use sample to make random arrangement
  shuffled_temps <- sample(ats$Temp)
  
  # store random correlation coefficient
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}
# compute p value

print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))
print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))
print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))
print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))
print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
  # Runs a simulation of the Ricker model
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return (N)
}
plot(Ricker(generations=10), type="l")
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
  N[1, ] <- p0
  for (pop in 1:length(p0)) { #loop through the populations
    for (yr in 2:numyears){ #for each pop, loop through the years
      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)
}
# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance: 
# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
  # Runs a simulation of the Ricker model
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations)
  {
    N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
  }
  return (N)
}
plot(Ricker(generations=10), type="l")
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
  N[1, ] <- p0
  for (pop in 1:length(p0)) { #loop through the populations
    for (yr in 2:numyears){ #for each pop, loop through the years
      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res1<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance: 
rm(list = ls())
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100) {
  
  # initial matrix
  N <- matrix(NA, numyears, length(p0))
  
  # Store the initial number of individuals in the matrix rows for the first year
  N[1, ] <- p0
  
  # Modelling the stochastic Ricker equation using matrix operations to add fluctuations from a normal distribution
  for (yr in 2:numyears) {
    N[yr, ] <- N[yr-1, ] * exp(r * (1 - N[yr - 1, ] / K) + rnorm(length(p0), 0, sigma))
  }
  
  return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
  N[1, ] <- p0
  for (pop in 1:length(p0)) { #loop through the populations
    for (yr in 2:numyears){ #for each pop, loop through the years
      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res1<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance: 
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100) {
  
  # initial matrix
  N <- matrix(NA, numyears, length(p0))
  
  # Store the initial number of individuals in the matrix rows for the first year
  N[1, ] <- p0
  
  # Modelling the stochastic Ricker equation using matrix operations to add fluctuations from a normal distribution
  for (yr in 2:numyears) {
    N[yr, ] <- N[yr-1, ] * exp(r * (1 - N[yr - 1, ] / K) + rnorm(length(p0), 0, sigma))
  }
  
  return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
  N[1, ] <- p0
  for (pop in 1:length(p0)) { #loop through the populations
    for (yr in 2:numyears){ #for each pop, loop through the years
      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res1<-stochrick()))
plot(stochrick(generations=10), type="l")
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
  N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
  N[1, ] <- p0
  for (pop in 1:length(p0)) { #loop through the populations
    for (yr in 2:numyears){ #for each pop, loop through the years
      N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
    
     }
  
  }
 return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res1<-stochrick()))
# Now write another function called stochrickvect that vectorizes the above to
# the extent possible, with improved performance: 
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100) {
  
  # initial matrix
  N <- matrix(NA, numyears, length(p0))
  
  # Store the initial number of individuals in the matrix rows for the first year
  N[1, ] <- p0
  
  # Modelling the stochastic Ricker equation using matrix operations to add fluctuations from a normal distribution
  for (yr in 2:numyears) {
    N[yr, ] <- N[yr-1, ] * exp(r * (1 - N[yr - 1, ] / K) + rnorm(length(p0), 0, sigma))
  }
  
  return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))
Exponential <- function(N0 = 1, r = 1, generations = 10) {
  # Runs a simulation of exponential growth
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations) {
    N[t] <- N[t-1] * exp(r)
    browser()
  }
  return (N)
}
plot(Exponential(), type="l", main="Exponential growth")
n
n
n
n
n
n
n
n
plot(Exponential(), type="l", main="Exponential growth")
q
Q
doit <- function(x) {
    temp_x <- sample(x, replace = TRUE)
    if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
         print(paste("Mean of this sample was:", as.character(mean(temp_x))))
        } 
    else {
        stop("Couldn't calculate mean: too few unique values!")
        }
    }
set.seed(1345) # again, to get the same result for illustration
popn <- rnorm(50)
hist(popn)
lapply(1:15, function(i) doit(popn))
result <- lapply(1:15, function(i) try(doit(popn), FALSE))
class(result)
result
result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
    result[[i]] <- try(doit(popn), FALSE)
    }
source("try.R")
source("try.R")
source("try.R")
source("try.R")
source("try.R")
source("try.R")
source("try.R")
source("try.R")
source("try.R")
source("try.R")
source("try.R")
source("try.R")
source("try.R")
# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")
# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)
# set permutations
num_permutations <- 1000
# create a vector to save the random cor
random_corrs <- numeric(num_permutations)
# use permutation test
for (i in 1:num_permutations) {
  # use sample to make random arrangement
  shuffled_temps <- sample(ats$Temp)
  
  # store random correlation coefficient
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}
# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations
# print p_value
print(paste("p value is:", p_value))
# explain in the pdf
pdf("../results/results.pdf", width = 6, height = 6)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Temperature", main = "Key West Florida average temperature ")
abline(lm(ats$Temp ~ ats$Year), col = "red")
dev.off()
# I checked in the overleaf. Make sure put main.tex and results.pdf in the same project
\documentclass[a4paper]{article}
\usepackage{graphicx}
\usepackage{geometry}
\begin{document}
\vspace*{-2cm}
\begin{verbatim}
# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")
# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)
# set permutations
num_permutations <- 1000
# create a vector to save the random cor
random_corrs <- numeric(num_permutations)
# use permutation test
for (i in 1:num_permutations) {
  # use sample to make random arrangement
  shuffled_temps <- sample(ats$Temp)
  
  # store random correlation coefficient
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}
# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations
# print p_value
print(paste("p value is:", p_value))
# explain in the pdf
pdf("../results/results.pdf", width = 7, height = 5)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Temperature", main = "Key West, Florida average temperature")
abline(lm(ats$Temp ~ ats$Year), col = "red")
text(1900, 24, paste("Observed correlation coefficient:", round(observed_corr, 2)), cex = 0.7)
text(1900, 24.5, paste("Approximate p-value:", round(p_value, 4)), cex = 0.7)
dev.off()
\end{verbatim}
\begin{figure}[ht]
  \centering
  \includegraphics[scale=0.8]{results.pdf}
  \caption{Key West, Florida average temperature}
  \label{fig:temperature}
\end{figure}
\end{document}
# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")
# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)
# set permutations
num_permutations <- 1000
# create a vector to save the random cor
random_corrs <- numeric(num_permutations)
# use permutation test
for (i in 1:num_permutations) {
  # use sample to make random arrangement
  shuffled_temps <- sample(ats$Temp)
  
  # store random correlation coefficient
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}
# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations
# print p_value
print(paste("p value is:", p_value))
# explain in the pdf
pdf("../results/results.pdf", width = 6, height = 6)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Temperature", main = "Key West Florida average temperature ")
abline(lm(ats$Temp ~ ats$Year), col = "red")
dev.off()
# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")
# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)
# set permutations
num_permutations <- 1000
# create a vector to save the random cor
random_corrs <- numeric(num_permutations)
# use permutation test
for (i in 1:num_permutations) {
  # use sample to make random arrangement
  shuffled_temps <- sample(ats$Temp)
  
  # store random correlation coefficient
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}
# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations
# print p_value
print(paste("p value is:", p_value))
# explain in the pdf
png("../results/results.pdf", width = 6, height = 6)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Temperature", main = "Key West Florida average temperature ")
abline(lm(ats$Temp ~ ats$Year), col = "red")
dev.off()
# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")
# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)
# set permutations
num_permutations <- 1000
# create a vector to save the random cor
random_corrs <- numeric(num_permutations)
# use permutation test
for (i in 1:num_permutations) {
  # use sample to make random arrangement
  shuffled_temps <- sample(ats$Temp)
  
  # store random correlation coefficient
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}
# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations
# print p_value
print(paste("p value is:", p_value))
# explain in the pdf
png(filename= "../results/results.pdf", width = 6, height = 6)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Temperature", main = "Key West Florida average temperature ")
abline(lm(ats$Temp ~ ats$Year), col = "red")
dev.off()
# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")
# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)
# set permutations
num_permutations <- 1000
# create a vector to save the random cor
random_corrs <- numeric(num_permutations)
# use permutation test
for (i in 1:num_permutations) {
  # use sample to make random arrangement
  shuffled_temps <- sample(ats$Temp)
  
  # store random correlation coefficient
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}
# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations
# print p_value
print(paste("p value is:", p_value))
# explain in the pdf
png(filename= "../results/results.pdf", width = 800, height = 600)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Temperature", main = "Key West Florida average temperature ")
abline(lm(ats$Temp ~ ats$Year), col = "red")
dev.off()
# load the data
load("../data/KeyWestAnnualMeanTemperature.RData")
# calculate correlation coefficients
observed_corr <- cor(ats$Year, ats$Temp)
# set permutations
num_permutations <- 1000
# create a vector to save the random cor
random_corrs <- numeric(num_permutations)
# use permutation test
for (i in 1:num_permutations) {
  # use sample to make random arrangement
  shuffled_temps <- sample(ats$Temp)
  
  # store random correlation coefficient
  random_corrs[i] <- cor(ats$Year, shuffled_temps)
}
# compute p value
p_value <- sum(random_corrs > observed_corr) / num_permutations
# print p_value
print(paste("p value is:", p_value))
# explain in the pdf
png(filename= "../results/results.png", width = 800, height = 600)
par(mar = c(4, 4, 2, 2))
plot(ats$Year, ats$Temp, type = "l", xlab = "Year", ylab = "Temperature", main = "Key West Florida average temperature ")
abline(lm(ats$Temp ~ ats$Year), col = "red")
dev.off()
library(ggplot2)
library(dplyr)

# 读取数据
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# 绘制图形，按 Predator.lifestage 分组
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction, group = Predator.lifestage)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# 保存图形
pdf("../results/PP_Regress.pdf")
print(plot)
dev.off()

# 计算回归结果
results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do({
    model <- lm(log(Predator.mass) ~ log(Prey.mass), data = .)
    data.frame(
      slope = coef(model)[2],
      intercept = coef(model)[1],
      R_Square = summary(model)$r.squared,
      F_statistic = summary(model)$fstatistic[1],
      p_value = coef(summary(model))[2,4]
    )
  })

# 保存回归结果
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

library(ggplot2)
library(dplyr)

# 读取数据
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# 绘制图形，按 Predator.lifestage 分组
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction, group = Predator.lifestage)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# 保存图形
pdf("../results/PP_Regress.pdf")
print(plot)
dev.off()

# 计算回归结果
results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do({
    model <- lm(log(Predator.mass) ~ log(Prey.mass), data = .)
    data.frame(
      slope = coef(model)[2],
      intercept = coef(model)[1],
      R_Square = summary(model)$r.squared,
      F_statistic = summary(model)$fstatistic[1],
      p_value = coef(summary(model))[2,4]
    )
  })

# 保存回归结果
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
# Obtain regression results
get_regression_results <- function(data_subset) {
  if(nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}


# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# 
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/regression_plot.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), alpha = 0.5) +
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator Mass in grams") +
  theme_minimal() +
  theme(legend.position="bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +  # Added this line
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()
# Here are packages we need
library(ggplot2)
library(dplyr)

# Set working directory (setwd() will help me to save documents to the 'results' directory)
setwd("../results")

# read the csv
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# draw the plot use ggplot (not qplot)
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
# use print as the problem indicates
print(plot)
dev.off()

# Calculate regression results including slope, intercept, R, F_statistic, p value
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            # I think it is linear model so that I use the following calculation
            R_Square = (cor(log(Predator.mass), log(Prey.mass)))^2,
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

library(ggplot2)
library(dplyr)

# 读取数据
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# 为每个唯一的 'Type.of.feeding.interaction' 和 'Predator.lifestage' 组合计算回归
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do({
    model <- lm(log(Predator.mass) ~ log(Prey.mass), data = .)
    data.frame(
      slope = coef(model)["log(Prey.mass)"],
      intercept = coef(model)["(Intercept)"],
      r_squared = summary(model)$r.squared,
      f_statistic = summary(model)$fstatistic[1],
      p_value = summary(model)$coefficients[2, 4]
    )
  }) %>%
  ungroup() # 移除分组，以便写入CSV

# 保存回归结果到CSV文件
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# 绘制图形并保存为PDF
pdf("../results/PP_Regress.pdf")
ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Predator.lifestage)) +
  geom_point() +
  geom_smooth(method = "lm", aes(group = Predator.lifestage), se = FALSE) +
  facet_wrap(~Type.of.feeding.interaction, scales = "free") +
  theme_minimal() +
  labs(title = "Predator-Prey Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass",
       y = "Log Predator Mass") +
  theme(legend.position = "bottom")
dev.off()

library(ggplot2)
library(dplyr)

# 读取数据
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# 为每个唯一的 'Type.of.feeding.interaction' 和 'Predator.lifestage' 组合计算回归
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do({
    model <- lm(log(Predator.mass) ~ log(Prey.mass), data = .)
    smry <- summary(model)
    data.frame(
      slope = coef(smry)["log(Prey.mass)", "Estimate"],
      intercept = coef(smry)["(Intercept)", "Estimate"],
      r_squared = smry$r.squared,
      f_statistic = smry$fstatistic[1],
      p_value = smry$coefficients["log(Prey.mass)", "Pr(>|t|)"] # 修正了这里
    )
  }) %>%
  ungroup() # 移除分组，以便写入CSV

# 保存回归结果到CSV文件
write.csv(regression_results, "PP_Regress_Results.csv", row.names = FALSE)

# 绘制图形并保存为PDF
pdf("PP_Regress.pdf")
ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Predator.lifestage)) +
  geom_point() +
  geom_smooth(method = "lm", aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage)), se = FALSE) +
  facet_wrap(~Type.of.feeding.interaction, scales = "free_y") +
  theme_minimal() +
  labs(title = "Predator-Prey Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass",
       y = "Log Predator Mass") +
  theme(legend.position = "bottom")
dev.off()

library(ggplot2)
library(dplyr)

# Read the data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Function to perform regression and extract results
get_regression_results <- function(df) {
  lm_model <- lm(log(Predator.mass) ~ log(Prey.mass), data = df)
  lm_summary <- summary(lm_model)
  coef_summary <- coef(lm_summary)
  
  if ("log(Prey.mass)" %in% rownames(coef_summary)) {
    slope <- coef_summary["log(Prey.mass)", "Estimate"]
    intercept <- coef_summary["(Intercept)", "Estimate"]
    r_squared <- lm_summary$r.squared
    f_statistic <- lm_summary$fstatistic[1]
    p_value <- coef_summary["log(Prey.mass)", "Pr(>|t|)"]
  } else {
    slope <- NA
    intercept <- NA
    r_squared <- NA
    f_statistic <- NA
    p_value <- NA
  }
  
  return(data.frame(slope, intercept, r_squared, f_statistic, p_value))
}

# Perform regression for each combination of feeding interaction and life stage
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Save regression results
write.csv(regression_results, "PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("PP_Regress.pdf")
ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Predator.lifestage)) +
  geom_point() +
  geom_smooth(method = "lm", aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage)), se = FALSE) +
  facet_wrap(~Type.of.feeding.interaction, scales = "free_y") +
  theme_minimal() +
  labs(title = "Predator-Prey Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass",
       y = "Log Predator Mass") +
  theme(legend.position = "bottom")
dev.off()

library(ggplot2)
library(dplyr)

# Read the data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Function to perform regression and extract results
get_regression_results <- function(df) {
  lm_model <- lm(log(Predator.mass) ~ log(Prey.mass), data = df)
  lm_summary <- summary(lm_model)
  coef_summary <- coef(lm_summary)
  
  if ("log(Prey.mass)" %in% rownames(coef_summary)) {
    slope <- coef_summary["log(Prey.mass)", "Estimate"]
    intercept <- coef_summary["(Intercept)", "Estimate"]
    r_squared <- lm_summary$r.squared
    f_statistic <- lm_summary$fstatistic[1]
    p_value <- coef_summary["log(Prey.mass)", "Pr(>|t|)"]
  } else {
    slope <- NA
    intercept <- NA
    r_squared <- NA
    f_statistic <- NA
    p_value <- NA
  }
  
  return(data.frame(slope, intercept, r_squared, f_statistic, p_value))
}

# Perform regression for each combination of feeding interaction and life stage
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Save regression results
write.csv(regression_results, "PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("PP_Regress.pdf")
ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Predator.lifestage)) +
  geom_point() +
  geom_smooth(method = "lm", aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage)), se = FALSE) +
  facet_wrap(~Type.of.feeding.interaction, scales = "free_y") +
  theme_minimal() +
  labs(title = "Predator-Prey Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass",
       y = "Log Predator Mass") +
  theme(legend.position = "bottom")
dev.off()

library(ggplot2)
library(dplyr)

# Read the data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Calculate regression results for each combination of feeding interaction type and predator life stage
regression_results <- data %>%
  mutate(log_predator_mass = log(Predator.mass),
         log_prey_mass = log(Prey.mass)) %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do({
    model <- lm(log_predator_mass ~ log_prey_mass, data = .)
    smry <- summary(model)
    data.frame(
      Feeding_Type = unique(.$Type.of.feeding.interaction),
      Life_Stage = unique(.$Predator.lifestage),
      Slope = coef(smry)["log_prey_mass", "Estimate"],
      Intercept = coef(smry)["(Intercept)", "Estimate"],
      R_Squared = smry$r.squared,
      F_Value = smry$fstatistic["value"],
      P_Value = coef(smry)["log_prey_mass", "Pr(>|t|)"]
    )
  }) %>%
  ungroup() %>%
  select(-matches("^(?!Feeding_Type|Life_Stage|Slope|Intercept|R_Squared|F_Value|P_Value).*$"))

# Save the regression results to a CSV file
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Plot the data
p <- ggplot(data, aes(x = log_prey_mass, y = log_predator_mass)) +
  geom_point(aes(color = Predator.lifestage), alpha = 0.7) +
  geom_smooth(aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage), color = Predator.lifestage), 
              method = "lm", se = FALSE) +
  facet_wrap(~Type.of.feeding.interaction, scales = "free") +
  scale_color_manual(values = c("adult" = "red", "juvenile" = "blue", "larva" = "green", "larva/juvenile" = "orange", "postlarva" = "purple", "postlarva/juvenile" = "brown")) +
  labs(title = "Predator-Prey Mass Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme_minimal() +
  theme(legend.position = "bottom")

# Save the plot to a PDF file
pdf("../results/PP_Regress.pdf", width = 11, height = 8.5)
print(p)
dev.off()

library(ggplot2)
library(dplyr)

# Set working directory to save files in the 'results' directory
# Please ensure this directory exists or change the path as appropriate.
setwd("../results")

# Read the dataset
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Transform the data for log-scale plotting and regression
data <- data %>%
  mutate(
    log_predator_mass = log(Predator.mass),
    log_prey_mass = log(Prey.mass)
  )

# Function to calculate regression results
calculate_regression <- function(df) {
  lm_fit <- lm(log_predator_mass ~ log_prey_mass, data = df)
  lm_sum <- summary(lm_fit)
  t_values <- coef(lm_sum)
  
  data.frame(
    slope = t_values["log_prey_mass", "Estimate"],
    intercept = t_values["(Intercept)", "Estimate"],
    r_squared = lm_sum$r.squared,
    f_statistic = lm_sum$fstatistic[1],
    p_value = coef(lm_sum)[2, 4]
  )
}

# Calculate regression results for each subset
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(calculate_regression(.)) %>%
  ungroup()

# Write the regression results to a CSV file
write.csv(regression_results, "PP_Regress_Results.csv", row.names = FALSE)

# Generate the plot
p <- ggplot(data, aes(x = log_prey_mass, y = log_predator_mass, color = Predator.lifestage)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = FALSE) +
  facet_grid(Type.of.feeding.interaction ~ .) +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  labs(title = "Predator-Prey Mass Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme(legend.position = "bottom") +
  scale_color_manual(values = c("adult" = "#E69F00", "juvenile" = "#56B4E9", "larva" = "#009E73", "larva/juvenile" = "#F0E442", "postlarva" = "#0072B2", "postlarva/juvenile" = "#D55E00"))

# Save the plot to a PDF file
pdf("PP_Regress.pdf", width = 11, height = 8.5)
print(p)
dev.off()

library(ggplot2)
library(dplyr)

# Set working directory to save files in the 'results' directory
# Please ensure this directory exists or change the path as appropriate.
setwd("../results")

# Read the dataset
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Transform the data for log-scale plotting and regression
data <- data %>%
  mutate(
    log_predator_mass = log(Predator.mass),
    log_prey_mass = log(Prey.mass)
  )

# Function to calculate regression results
calculate_regression <- function(df) {
  lm_fit <- lm(log_predator_mass ~ log_prey_mass, data = df)
  lm_sum <- summary(lm_fit)
  t_values <- coef(lm_sum)
  
  data.frame(
    slope = t_values["log_prey_mass", "Estimate"],
    intercept = t_values["(Intercept)", "Estimate"],
    r_squared = lm_sum$r.squared,
    f_statistic = lm_sum$fstatistic[1],
    p_value = coef(lm_sum)[2, 4]
  )
}

# Calculate regression results for each subset
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(calculate_regression(.)) %>%
  ungroup()

# Write the regression results to a CSV file
write.csv(regression_results, "PP_Regress_Results.csv", row.names = FALSE)

# Generate the plot
p <- ggplot(data, aes(x = log_prey_mass, y = log_predator_mass, color = Predator.lifestage)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = FALSE) +
  facet_grid(Type.of.feeding.interaction ~ .) +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  labs(title = "Predator-Prey Mass Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme(legend.position = "bottom") +
  scale_color_manual(values = c("adult" = "#E69F00", "juvenile" = "#56B4E9", "larva" = "#009E73", "larva/juvenile" = "#F0E442", "postlarva" = "#0072B2", "postlarva/juvenile" = "#D55E00"))

# Save the plot to a PDF file
pdf("PP_Regress.pdf", width = 11, height = 8.5)
print(p)
dev.off()

library(ggplot2)
library(dplyr)

# Read the data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Calculate regression results for each combination of feeding interaction type and predator life stage
regression_results <- data %>%
  mutate(log_predator_mass = log(Predator.mass),
         log_prey_mass = log(Prey.mass)) %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do({
    model <- lm(log_predator_mass ~ log_prey_mass, data = .)
    smry <- summary(model)
    data.frame(
      Feeding_Type = unique(.$Type.of.feeding.interaction),
      Life_Stage = unique(.$Predator.lifestage),
      Slope = coef(smry)["log_prey_mass", "Estimate"],
      Intercept = coef(smry)["(Intercept)", "Estimate"],
      R_Squared = smry$r.squared,
      F_Value = smry$fstatistic["value"],
      P_Value = coef(smry)["log_prey_mass", "Pr(>|t|)"]
    )
  }) %>%
  ungroup() %>%
  select(-matches("^(?!Feeding_Type|Life_Stage|Slope|Intercept|R_Squared|F_Value|P_Value).*$"))

# Save the regression results to a CSV file
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Plot the data
p <- ggplot(data, aes(x = log_prey_mass, y = log_predator_mass)) +
  geom_point(aes(color = Predator.lifestage), alpha = 0.7) +
  geom_smooth(aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage), color = Predator.lifestage), 
              method = "lm", se = FALSE) +
  facet_wrap(~Type.of.feeding.interaction, scales = "free") +
  scale_color_manual(values = c("adult" = "red", "juvenile" = "blue", "larva" = "green", "larva/juvenile" = "orange", "postlarva" = "purple", "postlarva/juvenile" = "brown")) +
  labs(title = "Predator-Prey Mass Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme_minimal() +
  theme(legend.position = "bottom")

# Save the plot to a PDF file
pdf("../results/PP_Regress.pdf", width = 11, height = 8.5)
print(p)
dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
# Obtain regression results
get_regression_results <- function(data_subset) {
  if(nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}


# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# 
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/regression_plot.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), alpha = 0.5) +
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator Mass in grams") +
  theme_minimal() +
  theme(legend.position="bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +  # Added this line
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()
library(ggplot2)
library(dplyr)

# Set working directory to save files in the 'results' directory
# Please ensure this directory exists or change the path as appropriate.
setwd("../results")

# Read the dataset
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Transform the data for log-scale plotting and regression
data <- data %>%
  mutate(
    log_predator_mass = log(Predator.mass),
    log_prey_mass = log(Prey.mass)
  )

# Function to calculate regression results
calculate_regression <- function(df) {
  lm_fit <- lm(log_predator_mass ~ log_prey_mass, data = df)
  lm_sum <- summary(lm_fit)
  t_values <- coef(lm_sum)
  
  data.frame(
    slope = t_values["log_prey_mass", "Estimate"],
    intercept = t_values["(Intercept)", "Estimate"],
    r_squared = lm_sum$r.squared,
    f_statistic = lm_sum$fstatistic[1],
    p_value = coef(lm_sum)[2, 4]
  )
}

# Calculate regression results for each subset
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(calculate_regression(.)) %>%
  ungroup()

# Write the regression results to a CSV file
write.csv(regression_results, "PP_Regress_Results.csv", row.names = FALSE)

# Generate the plot
p <- ggplot(data, aes(x = log_prey_mass, y = log_predator_mass, color = Predator.lifestage)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = FALSE) +
  facet_grid(Type.of.feeding.interaction ~ .) +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  labs(title = "Predator-Prey Mass Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme(legend.position = "bottom") +
  scale_color_manual(values = c("adult" = "#E69F00", "juvenile" = "#56B4E9", "larva" = "#009E73", "larva/juvenile" = "#F0E442", "postlarva" = "#0072B2", "postlarva/juvenile" = "#D55E00"))

# Save the plot to a PDF file
pdf("PP_Regress.pdf", width = 11, height = 8.5)
print(p)
dev.off()

library(ggplot2)
library(dplyr)

# Assuming the CSV file is in the same directory as the script
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Transform the data for plotting and regression
data <- data %>%
  mutate(
    log_Predator_mass = log(Predator.mass),
    log_Prey_mass = log(Prey.mass)
  )

# Perform linear regression analysis for each subset defined by feeding interaction and predator life stage
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do({
    model <- lm(log_Predator_mass ~ log_Prey_mass, data = .)
    smry <- summary(model)
    data.frame(
      Feeding_Type = first(.$Type.of.feeding.interaction),
      Life_Stage = first(.$Predator.lifestage),
      Slope = coef(smry)["log_Prey_mass", "Estimate"],
      Intercept = coef(smry)["(Intercept)", "Estimate"],
      R_Squared = smry$r.squared,
      F_Value = smry$fstatistic["value"],
      P_Value = smry$coefficients[2, "Pr(>|t|)"]
    )
  }) %>%
  ungroup()

# Save the regression results to a CSV file
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Generate the plot
p <- ggplot(data, aes(x = log_Prey_mass, y = log_Predator_mass, color = Predator.lifestage)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage)), se = FALSE) +
  facet_wrap(~Type.of.feeding.interaction, scales = "free_y") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  labs(title = "Predator-Prey Mass Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme(legend.position = "bottom") +
  scale_color_manual(values = c("adult" = "#E69F00", "juvenile" = "#56B4E9", "larva" = "#009E73", "larva/juvenile" = "#F0E442", "postlarva" = "#0072B2", "postlarva/juvenile" = "#D55E00"))

# Save the plot to a PDF file
ggsave("PP_Regress.pdf", plot = p, device = "pdf", path = "results/", width = 11, height = 8.5, units = "in")

library(ggplot2)
library(dplyr)

# Assuming the CSV file is in the same directory as the script
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Transform the data for plotting and regression
data <- data %>%
  mutate(
    log_Predator_mass = log(Predator.mass),
    log_Prey_mass = log(Prey.mass)
  )

# Perform linear regression analysis for each subset defined by feeding interaction and predator life stage
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do({
    model <- lm(log_Predator_mass ~ log_Prey_mass, data = .)
    smry <- summary(model)
    data.frame(
      Feeding_Type = first(.$Type.of.feeding.interaction),
      Life_Stage = first(.$Predator.lifestage),
      Slope = coef(smry)["log_Prey_mass", "Estimate"],
      Intercept = coef(smry)["(Intercept)", "Estimate"],
      R_Squared = smry$r.squared,
      F_Value = smry$fstatistic["value"],
      P_Value = smry$coefficients[2, "Pr(>|t|)"]
    )
  }) %>%
  ungroup()

# Save the regression results to a CSV file
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Generate the plot
p <- ggplot(data, aes(x = log_Prey_mass, y = log_Predator_mass, color = Predator.lifestage)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage)), se = FALSE) +
  facet_wrap(~Type.of.feeding.interaction, scales = "free_y") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  labs(title = "Predator-Prey Mass Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme(legend.position = "bottom") +
  scale_color_manual(values = c("adult" = "#E69F00", "juvenile" = "#56B4E9", "larva" = "#009E73", "larva/juvenile" = "#F0E442", "postlarva" = "#0072B2", "postlarva/juvenile" = "#D55E00"))

# Save the plot to a PDF file
pdf("PP_Regress.pdf", plot = p, device = "pdf", path = "results/", width = 11, height = 8.5, units = "in")

library(ggplot2)
library(dplyr)

# Assuming the CSV file is in the same directory as the script
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Transform the data for plotting and regression
data <- data %>%
  mutate(
    log_Predator_mass = log(Predator.mass),
    log_Prey_mass = log(Prey.mass)
  )

# Perform linear regression analysis for each subset defined by feeding interaction and predator life stage
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do({
    model <- lm(log_Predator_mass ~ log_Prey_mass, data = .)
    smry <- summary(model)
    data.frame(
      Feeding_Type = first(.$Type.of.feeding.interaction),
      Life_Stage = first(.$Predator.lifestage),
      Slope = coef(smry)["log_Prey_mass", "Estimate"],
      Intercept = coef(smry)["(Intercept)", "Estimate"],
      R_Squared = smry$r.squared,
      F_Value = smry$fstatistic["value"],
      P_Value = smry$coefficients[2, "Pr(>|t|)"]
    )
  }) %>%
  ungroup()

# Save the regression results to a CSV file
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Generate the plot
p <- ggplot(data, aes(x = log_Prey_mass, y = log_Predator_mass, color = Predator.lifestage)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage)), se = FALSE) +
  facet_wrap(~Type.of.feeding.interaction, scales = "free_y") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  labs(title = "Predator-Prey Mass Relationship by Feeding Interaction and Predator Life Stage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme(legend.position = "bottom") +
  scale_color_manual(values = c("adult" = "#E69F00", "juvenile" = "#56B4E9", "larva" = "#009E73", "larva/juvenile" = "#F0E442", "postlarva" = "#0072B2", "postlarva/juvenile" = "#D55E00"))

# Save the plot to a PDF file
pdf("../results/PP_Regress.pdf")

library(ggplot2)
library(dplyr)

# Read the data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Obtain regression results
get_regression_results <- function(df) {
  if(nrow(df) > 1) {
    model <- lm(log(Predator.mass) ~ log(Prey.mass), data = df)
    coefficients <- coef(summary(model))
    
    if("log(Prey.mass)" %in% rownames(coefficients)) {
      slope <- coefficients["log(Prey.mass)", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["log(Prey.mass)", "Pr(>|t|)"]
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  return(data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  ))
}

# Perform linear regression analysis on each subset
regression_results <- data %>%
  mutate(
    log_Predator_mass = log(Predator.mass),
    log_Prey_mass = log(Prey.mass)
  ) %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Save regression results to csv file
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Predator.lifestage)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", se = FALSE, aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage))) +
  scale_x_log10() +
  scale_y_log10() +
  facet_wrap(~Type.of.feeding.interaction, scales = "free_y") +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

print(plot)
dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/regression_plot.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), alpha = 0.5) +
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator Mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), alpha = 0.5) +
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator Mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/regression_plot.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 0.5) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator Mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 0.5) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator Mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 0.5) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = scales::log_breaks(1e-6, 1e+6),
                labels = scales::scientific_format()) +  # Use scientific format for y-axis
  scale_x_log10(breaks = scales::log_breaks(1e-07, 1e+01),
                labels = scales::scientific_format()) +  # Use scientific format for x-axis
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
# Obtain regression results
get_regression_results <- function(data_subset) {
  if(nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}


# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# 
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/regression_plot.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), alpha = 0.5) +
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator Mass in grams") +
  theme_minimal() +
  theme(legend.position="bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +  # Added this line
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()
library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
# Obtain regression results
get_regression_results <- function(data_subset) {
  if(nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}


# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# 
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/regression_plot.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), alpha = 0.5) +
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator Mass in grams") +
  theme_minimal() +
  theme(legend.position="bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +  # Added this line
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()
library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
# Obtain regression results
get_regression_results <- function(data_subset) {
  if(nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}


# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# 
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/regression_plot.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), alpha = 0.5) +
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Prey Mass in grams",
       y = "Predator Mass in grams") +
  theme_minimal() +
  theme(legend.position="bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +  # Added this line
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()
library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
my_data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
calculate_regression <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- my_data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(calculate_regression(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
ggplot(my_data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = scales::log_breaks(1e-6, 1e+6),
                labels = scales::scientific_format()) +  # Use scientific format for y-axis
  scale_x_log10(breaks = scales::log_breaks(1e-07, 1e+01),
                labels = scales::scientific_format()) +  # Use scientific format for x-axis
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

library(ggplot2)
library(dplyr)

# Read the data
my_data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
calculate_regression <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- my_data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(calculate_regression(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
ggplot(my_data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = scales::log_breaks(1e-6, 1e+6),
                labels = scales::scientific_format()) +  # Use scientific format for y-axis
  scale_x_log10(breaks = scales::log_breaks(1e-07, 1e+01),
                labels = scales::scientific_format()) +  # Use scientific format for x-axis
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

library(ggplot2)
library(dplyr)

# Read the data
my_data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
calculate_regression <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- my_data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(calculate_regression(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
ggplot(my_data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = scales::log_breaks(1e-6, 1e+6),
                labels = scales::scientific_format()) +  # Use scientific format for y-axis
  scale_x_log10(breaks = scales::log_breaks(1e-07, 1e+01),
                labels = scales::scientific_format()) +  # Use scientific format for x-axis
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))
# Save the plot as a PDF file
ggsave(filename = "../results/PP_Regress.pdf", plot = p, width = 6, height = 4)

library(ggplot2)
library(dplyr)

# Read the data
my_data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
calculate_regression <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- my_data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(calculate_regression(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
p <- ggplot(my_data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = scales::log_breaks(1e-6, 1e+6),
                labels = scales::scientific_format()) +  # Use scientific format for y-axis
  scale_x_log10(breaks = scales::log_breaks(1e-07, 1e+01),
                labels = scales::scientific_format()) +  # Use scientific format for x-axis
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

# Save the plot as a PDF file
ggsave(filename = "../results/PP_Regress.pdf", plot = p, width = 6, height = 4)

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Get unique combinations of grouping variables
group_combinations <- unique(MyDF[, c("Type.of.feeding.interaction", "Predator.lifestage")])

# Initialize an empty list to store results
results_list <- list()

# Loop through each group combination and apply the function
for (i in 1:nrow(group_combinations)) {
  group <- group_combinations[i, ]
  subset_data <- MyDF %>%
    filter(Type.of.feeding.interaction == group$Type.of.feeding.interaction, 
           Predator.lifestage == group$Predator.lifestage)
  results <- get_regression_results(subset_data)
  results_list[[i]] <- results
}

# Combine the results into a data frame
results <- do.call(rbind, results_list)

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = True, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  model <- lm(log(Predator.mass) ~ log(Prey.mass), data = data_subset)
  coefficients <- coef(summary(model))
  
  if ("log(Prey.mass)" %in% rownames(coefficients)) {
    slope <- coefficients["log(Prey.mass)", "Estimate"]
    intercept <- coefficients["(Intercept)", "Estimate"]
    p_value <- coefficients["log(Prey.mass)", "Pr(>|t|)"]
    r_squared <- summary(model)$r.squared
    f_statistic <- summary(model)$fstatistic[1]
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  return(data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  ))
}

# Add log-transformed mass columns for regression
data <- data %>%
  mutate(
    log_Predator_mass = log(Predator.mass),
    log_Prey_mass = log(Prey.mass)
  )

# Perform linear regression analysis on each subset
regression_results <- data %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.)) %>%
  ungroup()  # Ensure that we ungroup the data before saving

# Write the results to a CSV file
write.csv(regression_results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(data, aes(x = log_Prey_mass, y = log_Predator_mass, color = Predator.lifestage)) +
  geom_point(shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", se = FALSE, aes(group = interaction(Type.of.feeding.interaction, Predator.lifestage))) +
  facet_grid(Type.of.feeding.interaction ~ ., scales = "free_y") +
  scale_y_continuous(trans = 'log10') +
  scale_x_continuous(trans = 'log10') +
  labs(title = "Regression analyses subsetted by Predator lifestage",
       x = "Log Prey Mass (g)",
       y = "Log Predator Mass (g)") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator lifestage", override.aes = list(shape = "+")))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Set the working directory
setwd("../results")

# Read the CSV data
data <- read.csv(file.path("..", "data", "EcolArchives-E089-51-D1.csv"))

# Create the plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save the plot to a PDF file
ggsave("PP_Regress.pdf", plot, width = 8, height = 6)

# Calculate regression results
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(
    slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
    intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
    R_Square = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$r.squared,
    F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
    p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$coef[, 4]
  )

# Save regression results to a CSV file
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)


library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Set the working directory (if necessary)
# setwd("../results")

# Read the CSV data
data <- read.csv(file.path("..", "data", "EcolArchives-E089-51-D1.csv"))

# Create the plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save the plot to a PDF file
ggsave(file.path("..", "results", "PP_Regress.pdf"), plot, width = 8, height = 6)

# Calculate regression results
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(
    slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
    intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
    R_Square = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$r.squared,
    F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
    p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$coef[, 4]
  )

# Save regression results to a CSV file
write.csv(results, file.path("..", "results", "PP_Regress_Results.csv"), row.names = FALSE)

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

# Load necessary libraries
library(plyr)

# Load the data
mydata <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Convert mg values to g
mydata$Prey.mass[mydata$Prey.mass.unit == "mg"] <- mydata$Prey.mass[mydata$Prey.mass.unit == "mg"] / 1000

# Define a function for linear regression analysis
lm_function <- function(data) {
  lm_result <- summary(lm(Prey.mass ~ Predator.mass, data = data))
  return(data.frame(
    slope = lm_result$coefficients[2],
    intercept = lm_result$coefficients[1],
    r2 = lm_result$r.squared,
    pvalue = lm_result$coefficients[8],
    fstat = lm_result$fstatistic[1]
  ))
}

# Apply linear regression function to subsets of the data
output <- ddply(mydata, .(Type.of.feeding.interaction, Predator.lifestage, Location), lm_function)

# Write the results to a CSV file
write.csv(output, "../results/PP_Regress_loc_Results.csv", row.names = FALSE)

# Load necessary libraries
library(plyr)

# Load the data
mydata <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Convert mg values to g
mydata$Prey.mass[mydata$Prey.mass.unit == "mg"] <- mydata$Prey.mass[mydata$Prey.mass.unit == "mg"] / 1000

# Define a function for linear regression analysis
lm_function <- function(data) {
  lm_result <- summary(lm(Prey.mass ~ Predator.mass, data = data))
  return(data.frame(
    slope = lm_result$coefficients[2],
    intercept = lm_result$coefficients[1],
    r2 = lm_result$r.squared,
    pvalue = lm_result$coefficients[8],
    fstat = lm_result$fstatistic[1]
  ))
}

# Apply linear regression function to subsets of the data
output <- ddply(mydata, .(Type.of.feeding.interaction, Predator.lifestage, Location), lm_function)

# Write the results to a CSV file
write.csv(output, "../results/PP_Regress_loc_Results.csv", row.names = FALSE)
# Load necessary libraries
library(plyr)

# Load the data
mydata <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Convert mg values to g
mydata$Prey.mass[mydata$Prey.mass.unit == "mg"] <- mydata$Prey.mass[mydata$Prey.mass.unit == "mg"] / 1000

# Define a function for linear regression analysis
lm_function <- function(data) {
  lm_result <- summary(lm(Prey.mass ~ Predator.mass, data = data))
  return(data.frame(
    slope = lm_result$coefficients[2],
    intercept = lm_result$coefficients[1],
    r2 = lm_result$r.squared,
    pvalue = lm_result$coefficients[8],
    fstat = lm_result$fstatistic[1]
  ))
}

# Apply linear regression function to subsets of the data
output <- ddply(mydata, .(Type.of.feeding.interaction, Predator.lifestage, Location), lm_function)

# Write the results to a CSV file
write.csv(output, "../results/PP_Regress_loc_Results.csv", row.names = FALSE)

# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Set the working directory (if necessary)
# setwd("../results")

# Read the CSV data
data <- read.csv(file.path("..", "data", "EcolArchives-E089-51-D1.csv"))

# Create the plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save the plot to a PDF file
ggsave(file.path("..", "results", "PP_Regress.pdf"), plot, width = 8, height = 6)

# Calculate regression results
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(
    slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
    intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
    R_Square = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$r.squared,
    F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
    p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$coef[, 4]
  )

# Save regression results to a CSV file
write.csv(results, file.path("..", "results", "PP_Regress_Results.csv"), row.names = FALSE)

# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Set the working directory
setwd("../results")

# Read the CSV data
data <- read.csv(file.path("..", "data", "EcolArchives-E089-51-D1.csv"))

# Create the plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save the plot to a PDF file
ggsave("PP_Regress.pdf", plot, width = 8, height = 6)

# Calculate regression results
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(
    slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
    intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
    R_Square = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$r.squared,
    F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
    p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$coef[, 4]
  )

# Save regression results to a CSV file
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)


# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Set the working directory (if necessary)
# setwd("../results")

# Read the CSV data
data <- read.csv(file.path("..", "data", "EcolArchives-E089-51-D1.csv"))

# Create the plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save the plot to a PDF file
ggsave(file.path("..", "results", "PP_Regress.pdf"), plot, width = 8, height = 6)

# Calculate regression results
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(
    slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
    intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
    R_Square = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$r.squared,
    F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
    p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$coef[, 4]
  )

# Save regression results to a CSV file
write.csv(results, file.path("..", "results", "PP_Regress_Results.csv"), row.names = FALSE)

# Here are packages we need
library(ggplot2)
library(dplyr)

# Set working directory (setwd() will help me to save documents to the 'results' directory)
setwd("../results")

# read the csv
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# draw the plot use ggplot (not qplot)
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
# use print as the problem indicates
print(plot)
dev.off()

# Calculate regression results including slope, intercept, R, F_statistic, p value
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            # I think it is linear model so that I use the following calculation
            R_Square = (cor(log(Predator.mass), log(Prey.mass)))^2,
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)
# Here are packages we need
library(ggplot2)
library(dplyr)

# Set working directory (setwd() will help me to save documents to the 'results' directory)
setwd("../results")

# read the csv
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# draw the plot use ggplot (not qplot)
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
# use print as the problem indicates
print(plot)
dev.off()

# Calculate regression results including slope, intercept, R, F_statistic, p value
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            # I think it is linear model so that I use the following calculation
            R_Square = (cor(log(Predator.mass), log(Prey.mass)))^2,
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)
# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Read the CSV data
data <- read.csv(file.path("..", "data", "EcolArchives-E089-51-D1.csv"))

# Create the plot with modifications
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point(shape = 16, size = 3) +  # 修改点的样式和大小
  geom_smooth(method = "lm", se = FALSE) +  # 不显示置信区间
  facet_wrap(~ Type.of.feeding.interaction) +  # 使用分面展示不同组别
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass") +
  theme_minimal()  # 使用简洁的主题

# Save the plot to a PDF file
ggsave(file.path("..", "results", "PP_Regress_Modified.pdf"), plot, width = 8, height = 6)

# Calculate regression results with modifications
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  do({
    model <- lm(log(Predator.mass) ~ log(Prey.mass), data = .)
    tibble(
      slope = coef(model)[2],
      intercept = coef(model)[1],
      R_Square = summary(model)$r.squared,
      F_statistic = summary(model)$fstatistic[1],
      p_value = summary(model)$coef[2, 4]
    )
  })

# Save regression results to a CSV file
write.csv(results, file.path("..", "results", "PP_Regress_Results_Modified.csv"), row.names = FALSE)

# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Read the CSV data
data <- read.csv(file.path("..", "data", "EcolArchives-E089-51-D1.csv"))

# Create the plot with modifications
plot <- ggplot(data, aes(x = Prey.mass, y = Predator.mass, color = Type.of.feeding.interaction)) +
  geom_point(shape = 16, size = 3) +  # 修改点的样式和大小
  geom_smooth(method = "lm", se = FALSE) +  # 不显示置信区间
  facet_wrap(~ Type.of.feeding.interaction) +  # 使用分面展示不同组别
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Prey Mass",
       y = "Predator Mass") +
  theme_minimal()  # 使用简洁的主题

# Save the plot to a PDF file
ggsave(file.path("..", "results", "PP_Regress_Modified.pdf"), plot, width = 8, height = 6)

# Calculate regression results with modifications
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  do({
    model <- lm(Predator.mass ~ Prey.mass, data = .)
    tibble(
      slope = coef(model)[2],
      intercept = coef(model)[1],
      R_Square = summary(model)$r.squared,
      F_statistic = summary(model)$fstatistic[1],
      p_value = summary(model)$coef[2, 4]
    )
  })

# Save regression results to a CSV file
write.csv(results, file.path("..", "results", "PP_Regress_Results_Modified.csv"), row.names = FALSE)

library(ggplot2)
library(dplyr)

# Read the data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Define a function to obtain regression results
get_regression_results <- function(data_subset) {
  if (nrow(data_subset) > 1) {
    model <- lm(Predator.mass ~ Prey.mass, data = data_subset)
    coefficients <- coef(summary(model))
    
    if ("Prey.mass" %in% rownames(coefficients)) {
      slope <- coefficients["Prey.mass", "Estimate"]
      intercept <- coefficients["(Intercept)", "Estimate"]
      p_value <- coefficients["Prey.mass", "Pr(>|t|)"]
      
      r_squared <- summary(model)$r.squared
      f_statistic <- summary(model)$fstatistic[1]
    } else {
      slope <- NA
      intercept <- NA
      p_value <- NA
      r_squared <- NA
      f_statistic <- NA
    }
  } else {
    slope <- NA
    intercept <- NA
    p_value <- NA
    r_squared <- NA
    f_statistic <- NA
  }
  
  data.frame(
    slope = slope,
    intercept = intercept,
    r_squared = r_squared,
    f_statistic = f_statistic,
    p_value = p_value
  )
}

# Perform linear regression analysis on each subset
results <- MyDF %>%
  group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
  do(get_regression_results(.))

# Write the results to a CSV file
write.csv(results, "../results/PP_Regress_Results.csv", row.names = FALSE)

# Visualizing the regression analyses
pdf("../results/PP_Regress.pdf")

ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass)) +
  facet_grid(Type.of.feeding.interaction ~ .) + 
  geom_point(aes(color = Predator.lifestage), shape = "+", alpha = 1) +  # Use shape "+" for crosses
  geom_smooth(method = "lm", aes(color = Predator.lifestage), se = FALSE, fullrange = TRUE) +
  scale_y_log10(breaks = c(1e-6, 1e-2, 1e+2, 1e+6),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  scale_x_log10(breaks = c(1e-07, 1e-03, 1e+01),
                labels = scales::trans_format("log10", scales::math_format(10^.x))) +
  labs(x = "Prey Mass in grams",
       y = "Predator mass in grams") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.border = element_rect(fill = NA, color = "black", linewidth = 1)) +
  guides(color = guide_legend(title = "Predator.lifestage", ncol = 6, keywidth = 1, keyheight = 1))

dev.off()

# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Read the CSV data
data <- read.csv(file.path("..", "data", "EcolArchives-E089-51-D1.csv"))

# Create the plot with modifications
plot <- ggplot(data, aes(x = Prey.mass, y = Predator.mass, color = Type.of.feeding.interaction)) +
  geom_point(shape = 16, size = 3) +  # 修改点的样式和大小
  geom_smooth(method = "lm", se = FALSE) +  # 不显示置信区间
  facet_wrap(~ Type.of.feeding.interaction) +  # 使用分面展示不同组别
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Prey Mass",
       y = "Predator Mass") +
  theme_minimal()  # 使用简洁的主题

# Save the plot to a PDF file
ggsave(file.path("..", "results", "PP_Regress_Modified.pdf"), plot, width = 8, height = 6)

# Calculate regression results with modifications
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(
    slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
    intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
    R_Square = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$r.squared,
    F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
    p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$coef[, 4]
  )
# Save regression results to a CSV file
write.csv(results, file.path("..", "results", "PP_Regress_Results_Modified.csv"), row.names = FALSE)

# Load the necessary libraries
library(ggplot2)
library(dplyr)

# Read the CSV data
data <- read.csv(file.path("..", "data", "EcolArchives-E089-51-D1.csv"))

# Create the plot with modifications
plot <- ggplot(data, aes(x = Prey.mass, y = Predator.mass, color = Type.of.feeding.interaction)) +
  geom_point(shape = 16, size = 3) +  # 修改点的样式和大小
  geom_smooth(method = "lm", se = FALSE) +  # 不显示置信区间
  facet_wrap(~ Type.of.feeding.interaction) +  # 使用分面展示不同组别
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Prey Mass",
       y = "Predator Mass") +
  theme_minimal()  # 使用简洁的主题

# Save the plot to a PDF file
ggsave(file.path("..", "results", "PP_Regress_Modified.pdf"), plot, width = 8, height = 6)

# Calculate regression results with modifications
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  do({
    model <- lm(Predator.mass ~ Prey.mass, data = .)
    tibble(
      slope = coef(model)[2],
      intercept = coef(model)[1],
      R_Square = summary(model)$r.squared,
      F_statistic = summary(model)$fstatistic[1],
      p_value = summary(model)$coef[2, 4]
    )
  })

# Save regression results to a CSV file
write.csv(results, file.path("..", "results", "PP_Regress_Results_Modified.csv"), row.names = FALSE)

q()

Starting code feedback for Bowen, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 12.29 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week1, week2, miniproject, Feedback, week3, week7

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
# Ignore all compiled/generated files and directories
*.pdf
*.log
*.aux
*.out

# Ignore all temporary files
*~

# Ignore files and directories generated by IDEs
.idea/
.vscode/

# Ignore files generated by the operating system
.DS_Store
Thumbs.db

# Ignore the contents of the compiled output directory
/results/*

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEECourseWork

## Author

Bowen Duan

## Overview

**This repository contains the content of the first term computing weeks** 

## Versions

R: 4.3.2

Python: 3.10.12



## Contact

bd623@imperial.ac.uk

# CMEE Coursework Groupwork Repository

## Group5: Bowen Duan, Chufan Wu, Hongyuan Guo, Robert Temea, Yi Yu

## List of scripts

1. **align_seqs_better.py** in week2/code
2. **align_seqs_fasta.py** in week2/code
3. **oaks_debugme_group.py** in week2/code
4. **get_TreeHeight.R** in week3/code
5. **get_TreeHeight.py** in week3/code
6. **run_get_TreeHeight.sh** in week3/code
7. **TAutoCorr.R** in week3/code
8. **FloridaAutoCorr.tex** in week3/code
9. **PP_Regress_loc.R** in week3/code

## Script Summary

1. align_seqs_better.py


    This code is used to analyze the matching between two DNA sequences by comparing their character sequences, finding the best matching starting position, and calculating the matching score. It then stores the best matching result along with its corresponding score in the **results** directory.

2. align_seqs_fasta.py


    This code performs sequence alignment between two DNA sequences loaded from FASTA files, identifying the best matching alignment and saving it along with its score in the **results** directory.

3. oaks_debugme_group.py

    This code processes a CSV file containing biological data, specifically focusing on identifying and extracting rows related to oak species, and then writes this filtered data to a new CSV file and save in the **results** directory.

4. get_TreeHeight.R

    This R script includes a TreeHeight function for calculating tree heights using trigonometry, based on tree distance and angle. It reads tree data from a CSV file, adds calculated heights to the dataframe, and saves it as a new CSV, named after the input file's basename.

5. get_TreeHeight.py

    Similar to the R version, this Python script features a TreeHeight function for computing tree heights from tree base distance and top angle. It loads data from a CSV into a pandas dataframe, appends height calculations, and exports it as a new CSV, using the input file's basename for naming.

6. run_get_TreeHeight.sh

    A shell script that executes both the R and Python scripts for tree height calculation. It processes an externally provided dataset, with both scripts producing a CSV file with calculated tree heights, saved in the **results** directory.

7. TAutoCorr.R

    This code begins by loading an RData file containing Key West annual mean temperature data and calculates the correlation coefficient between consecutive years of temperature data. It then performs a specified number of permutations of the temperature data, calculating the correlation coefficient for each permutation. Finally, the code computes an approximate p-value, creates visualizations of the original temperature data and the distribution of correlation coefficients after permutations, and prints the results.

8. FloridaAutoCorr.tex

    This document presents a permutation analysis to establish significant temperature correlations between successive years in Key West, Florida during the 20th century. It discusses the methodology used and reports the results, including a significant positive correlation between temperature and year.

9. PP_Regress_loc.R


    This code conducts linear regression analysis on data, converting units from milligrams to grams and saving the results to a CSV file in the **results** directory.






**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: week1, week2, week3, week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: sandbox, results, data, code

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Week1
## Author

Bowen Duan

## Overview

**Code** contains the scripts.

**Data** contains data needed to run those scripts.

**Results** is where the output from those scripts is sent to.

**Sandbox** is a miscellaneous directory containing experimental code and data.

## Versions

R: 4.3.2

Python: 3.10.12

## List of Scripts

- `LV1.py`: Python script implementing basic numerical integration techniques and the Lotka-Volterra model, including calculations with trapezoidal and Simpson's rules.
- `LV2.py`: Advanced Python script for a modified Lotka-Volterra model, incorporating command line arguments and utilizing SciPy for integration.
- `profileme.py`: Python script demonstrating basic profiling with simple functions to understand performance impacts.
- `profileme2.py`: Improved version of `profileme.py`, demonstrating more efficient Python code practices for better performance.
- `regexs.py`: Python script showcasing the usage of regular expressions for pattern matching and searching within strings.
- `test.sh`: Shell script to profile Python scripts `LV1.py` and `LV2.py` using Python's cProfile module for performance analysis.
- `Test.R`: Basic R script for printing a greeting, demonstrating simple output in R.
- `TestR.py`: Python script to run an R script (`TestR.R`) using the `subprocess` module, capturing output and errors.
- `timeitme.py`: Python script that uses `timeit` module to compare performance between loop-based and list comprehension-based functions.


## Contact

bd623@imperial.ac.uk


**********************************************************************

Results directory is empty - good! 

Found 9 code files: profileme2.py, Test.R, profileme.py, regexs.py, test.sh, timeitme.py, TestR.py, LV1.py, LV2.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file profileme2.py...

File contents are:

**********************************************************************
def my_squares(iters):
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 96.5

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 2.32867s

======================================================================
Inspecting script file Test.R...

File contents are:

**********************************************************************
print("Hello, this is R!")

**********************************************************************

Testing Test.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.08851s

======================================================================
Inspecting script file profileme.py...

File contents are:

**********************************************************************
def my_squares(iters):
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.06582s

======================================================================
Inspecting script file regexs.py...

File contents are:

**********************************************************************
import re
my_string = "a given string"
match = re.search(r'\s', my_string)
print(match)
match.group()
match = re.search(r'\d', my_string)
print(match)

MyStr = 'an example'

match = re.search(r'\w*\s', MyStr) # what pattern is this?

if match:                      
    print('found a match:', match.group()) 
else:
    print('did not find a match')    

match = re.search(r'2' , "it takes 2 to tango")
match.group()

match = re.search(r'\d' , "it takes 2 to tango")
match.group()

match = re.search(r'\d.*' , "it takes 2 to tango")
match.group()

match = re.search(r'\s\w{1,3}\s', 'once upon a time')
match.group()

match = re.search(r'\s\w*$', 'once upon a time')
match.group()

re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group()

re.search(r'^\w*.*\s', 'once upon a time').group() # 'once upon a '

re.search(r'^\w*.*?\s', 'once upon a time').group()

re.search(r'<.+>', 'This is a <EM>first</EM> test').group()

re.search(r'<.+?>', 'This is a <EM>first</EM> test').group()

re.search(r'\d*\.?\d*','1432.75+60.22i').group()

re.search(r'[AGTC]+', 'the sequence ATTCGT').group()

re.search(r'\s+[A-Z]\w+\s*\w+', "The bird-shit frog's name is Theloderma asper.").group()

MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s]+",MyStr)
match.group()

MyStr = 'Samraat Pawar, s-pawar@imperial.ac.uk, Systems biology and ecological theory'

match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s]+",MyStr)
match.group()

**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 91.0

Output (only first 500 characters): 


**********************************************************************
<re.Match object; span=(1, 2), match=' '>
None
found a match: an 

**********************************************************************

Code ran without errors

Time consumed = 0.01606s

======================================================================
Inspecting script file test.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Script to run and profile LV1.py and LV2.py

# Running and profiling LV1.py
echo "Profiling LV1.py"
python3 -m cProfile -s time LV1.py

# Running and profiling LV2.py with example parameters
echo "Profiling LV2.py with parameters r=1, a=0.1, z=1.5, e=0.75, K=50"
python3 -m cProfile -s time LV2.py 1 0.1 1.5 0.75 50


**********************************************************************

Testing test.sh...

Output (only first 500 characters): 


**********************************************************************
Profiling LV1.py
         19837102 function calls (19391190 primitive calls) in 6.370 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
     2946    1.035    0.000    4.652    0.002 font_manager.py:1077(addfont)
      182    0.989    0.005    2.093    0.011 afm.py:240(_parse_kern_pairs)
  1496046    0.539    0.000    0.782    0.000 afm.py:57(_to_float)
      223    0.402    0.002    1.290    0.006 afm.py:186(_parse_char_metrics)
  17281
**********************************************************************

Code ran without errors

Time consumed = 10.01225s

======================================================================
Inspecting script file timeitme.py...

File contents are:

**********************************************************************
##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join

**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 89.0

Output (only first 500 characters): 


**********************************************************************
10000000 My string
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 5.03871s

======================================================================
Inspecting script file TestR.py...

File contents are:

**********************************************************************
import subprocess
p = subprocess.Popen("Rscript --verbose TestR.R > ../results/TestR.Rout 2> ../results/TestR_errFile.Rout", shell=True).wait()

**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 87.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.02372s

======================================================================
Inspecting script file LV1.py...

File contents are:

**********************************************************************
import numpy as np
import scipy.integrate as integrate
import matplotlib.pylab as p

# Area under a curve
y = np.array([5, 20, 18, 19, 18, 7, 4])

# Compute the area using the trapezoidal rule
area_trapz_dx2 = integrate.trapz(y, dx=2)
area_trapz_dx1 = integrate.trapz(y, dx=1)
area_trapz_dx3 = integrate.trapz(y, dx=3)

# Compute the area using Simpson's rule
area_simps_dx2 = integrate.simps(y, dx=2)
area_simps_dx1 = integrate.simps(y, dx=1)
area_simps_dx3 = integrate.simps(y, dx=3)

# Lotka-Volterra model
def dCR_dt(pops, t=0):
    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    return np.array([dRdt, dCdt])

# Assign parameter values
r = 1.
a = 0.1 
z = 1.5
e = 0.75

# Define the time vector
t = np.linspace(0, 15, 1000)

# Set initial conditions
R0 = 10
C0 = 5 
RC0 = np.array([R0, C0])

# Numerically integrate the system
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

# Plotting the population dynamics
f1 = p.figure()
p.plot(t, pops[:,0], 'g-', label='Resource density')
p.plot(t, pops[:,1], 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
f1.savefig('../results/LV_model.pdf')


# Plotting the Lotka-Volterra phase plot
f2 = p.figure()
p.plot(pops[:,0], pops[:,1], 'r-')
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')
f2.savefig('../results/LV_phase_plot.pdf')


**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 84.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.78846s

======================================================================
Inspecting script file LV2.py...

File contents are:

**********************************************************************
import numpy as np
import scipy.integrate as integrate
import matplotlib.pyplot as plt
import sys

# Function for the modified Lotka-Volterra model with resource density dependence
def dCR_dt(pops, t=0):
    R, C = pops
    dRdt = r * R * (1 - R / K) - a * R * C 
    dCdt = -z * C + e * a * R * C
    return np.array([dRdt, dCdt])

# Command line arguments for parameters
r, a, z, e, K = map(float, sys.argv[1:6])

# Time vector
t = np.linspace(0, 100, 1000)  # Adjust time length if needed

# Initial conditions
R0 = 10
C0 = 5 
RC0 = np.array([R0, C0])

# Numerically integrate the system
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

# Create a figure with subplots
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6), sharex=True)

# Plot resource density
ax1.plot(t, pops[:, 0], 'g-', label='Resource density')
ax1.set_ylabel('Resource Density')
ax1.set_title('Modified Lotka-Volterra Model')
ax1.legend(loc='best')

# Plot consumer density
ax2.plot(t, pops[:, 1], 'b-', label='Consumer density')
ax2.set_xlabel('Time')
ax2.set_ylabel('Consumer Density')
ax2.legend(loc='best')

# Add a title and parameters information
plt.suptitle(f'r={r}, a={a}, z={z}, e={e}, K={K}')

# Save the figure as a PDF
plt.savefig('../results/LV_model_with_density_dependence.pdf')

# Print final population values
print(f'Final Resource Density: {pops[-1,0]}')
print(f'Final Consumer Density: {pops[-1,1]}')

# Show the plot
plt.show()

**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 82.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2023-24/Coursework/StudentRepos/BowenDuan_/week7/code/LV2.py", line 14, in <module>
    r, a, z, e, K = map(float, sys.argv[1:6])
ValueError: not enough values to unpack (expected 5, got 0)

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 82.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!
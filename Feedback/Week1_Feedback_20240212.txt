Starting code feedback for Bowen, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 12.29 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week1, week2, miniproject, Feedback, week3, week7

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
# Ignore all compiled/generated files and directories
*.pdf
*.log
*.aux
*.out

# Ignore all temporary files
*~

# Ignore files and directories generated by IDEs
.idea/
.vscode/

# Ignore files generated by the operating system
.DS_Store
Thumbs.db

# Ignore the contents of the compiled output directory
/results/*

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEECourseWork

## Author

Bowen Duan

## Overview

**This repository contains the content of the first term computing weeks** 

## Versions

R: 4.3.2

Python: 3.10.12



## Contact

bd623@imperial.ac.uk

# CMEE Coursework Groupwork Repository

## Group5: Bowen Duan, Chufan Wu, Hongyuan Guo, Robert Temea, Yi Yu

## List of scripts

1. **align_seqs_better.py** in week2/code
2. **align_seqs_fasta.py** in week2/code
3. **oaks_debugme_group.py** in week2/code
4. **get_TreeHeight.R** in week3/code
5. **get_TreeHeight.py** in week3/code
6. **run_get_TreeHeight.sh** in week3/code
7. **TAutoCorr.R** in week3/code
8. **FloridaAutoCorr.tex** in week3/code
9. **PP_Regress_loc.R** in week3/code

## Script Summary

1. align_seqs_better.py


    This code is used to analyze the matching between two DNA sequences by comparing their character sequences, finding the best matching starting position, and calculating the matching score. It then stores the best matching result along with its corresponding score in the **results** directory.

2. align_seqs_fasta.py


    This code performs sequence alignment between two DNA sequences loaded from FASTA files, identifying the best matching alignment and saving it along with its score in the **results** directory.

3. oaks_debugme_group.py

    This code processes a CSV file containing biological data, specifically focusing on identifying and extracting rows related to oak species, and then writes this filtered data to a new CSV file and save in the **results** directory.

4. get_TreeHeight.R

    This R script includes a TreeHeight function for calculating tree heights using trigonometry, based on tree distance and angle. It reads tree data from a CSV file, adds calculated heights to the dataframe, and saves it as a new CSV, named after the input file's basename.

5. get_TreeHeight.py

    Similar to the R version, this Python script features a TreeHeight function for computing tree heights from tree base distance and top angle. It loads data from a CSV into a pandas dataframe, appends height calculations, and exports it as a new CSV, using the input file's basename for naming.

6. run_get_TreeHeight.sh

    A shell script that executes both the R and Python scripts for tree height calculation. It processes an externally provided dataset, with both scripts producing a CSV file with calculated tree heights, saved in the **results** directory.

7. TAutoCorr.R

    This code begins by loading an RData file containing Key West annual mean temperature data and calculates the correlation coefficient between consecutive years of temperature data. It then performs a specified number of permutations of the temperature data, calculating the correlation coefficient for each permutation. Finally, the code computes an approximate p-value, creates visualizations of the original temperature data and the distribution of correlation coefficients after permutations, and prints the results.

8. FloridaAutoCorr.tex

    This document presents a permutation analysis to establish significant temperature correlations between successive years in Key West, Florida during the 20th century. It discusses the methodology used and reports the results, including a significant positive correlation between temperature and year.

9. PP_Regress_loc.R


    This code conducts linear regression analysis on data, converting units from milligrams to grams and saving the results to a CSV file in the **results** directory.






**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: week1, week2, week3, week7

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: sandbox, results, data, code

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Week1
## Author

Bowen Duan

## Overview

**Code** contains the scripts.

**Data** contains data needed to run those scripts.

**Results** is where the output from those scripts is sent to.

**Sandbox** is a miscellaneous directory containing experimental code and data.

## Versions

R: 4.3.2

Python: 3.10.12

## List of Scripts

- `boilerplate.sh`: A shell script template that prints a message.
- `CompileLaTeX.sh`: Compiles LaTeX files and generates a PDF.
- `ConcatenateTwoFiles.sh`: Combines the contents of two files.
- `CountLines.sh`: Counts the number of lines in a file.
- `csvtospace.sh`: Converts CSV files to space-separated text.
- `FirstBiblio.bib`: Contain the references
- `FirstExmaple.pdf`: This is a compiled pdf file
- `FirstExmaple.tex`: Includes compilable latex code.
- `MyExampleScript.sh`: An shell script example.
- `tabtocsv.sh`: Converts tabs to commas in a file.
- `tiff2png.sh`: Converts TIFF images to PNG format.
- `UnixPrac1.txt`: Answer practical questions
- `variables.sh`: Demonstrates the use of variables.

## Contact

bd623@imperial.ac.uk

**********************************************************************

Results directory is empty - good! 

Found 12 code files: csvtospace.sh, FirstExample.tex, CompileLaTeX.sh, tiff2png.sh, boilerplate.sh, ConcatenateTwoFiles.sh, tabtocsv.sh, MyExampleScript.sh, FirstBiblio.bib, variables.sh, CountLines.sh, UnixPrac1.txt

Found the following extra files: FirstExample.pdf
0.5 pt deducted per extra file

Current Points = 99.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
#!/bin/bash

if [ $# -ne 1 ]; then
  echo "Error: Wrong number of input arguments."
  echo "Usage: $0 <csv-file>"
  exit 1
fi

if [ ! -f "$1" ]; then
  echo "Error: File '$1' not found."
  exit 1
fi

output_file="${1%.*}.txt"

# Optional: Check if output file already exists
if [ -f "$output_file" ]; then
  echo "Warning: Output file '$output_file' already exists. Overwrite? (y/n)"
  read overwrite
  if [ "$overwrite" != "y" ]; then
    echo "Conversion cancelled."
    exit 1
  fi
fi

# Convert comma separated values to space separated values and write to output file
sed 's/,/ /g' "$1" > "$output_file" 
mv "$output_file" ../results/
echo "CSV file '$1' converted to space separated values and saved as '../results/$(basename "$output_file")'."

**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
Error: Wrong number of input arguments.
Usage: csvtospace.sh <csv-file>

**********************************************************************

Code ran without errors

Time consumed = 0.00517s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article}

\title{A Simple Document}

\author{Your Name}

\date{}

\begin{document}
  \maketitle
  
  \begin{abstract}
    This paper analyzes a seminal equation in population biology.
  \end{abstract}
  
  \section{Introduction}
    Blah Blah
  
  \section{Materials \& Methods}
  
  A foundational equation of population biology is:
  
  \begin{equation}
    \frac{dN}{dt} = r N (1 - \frac{N}{K})
  \end{equation}
  
  It was first proposed by Verhulst in 1838 \cite{verhulst1838notice}.
  
  \bibliographystyle{plain}
  
  \bibliography{FirstBiblio}

\end{document}

**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:

**********************************************************************
#!/bin/bash
pdflatex $1.tex
bibtex $1
pdflatex $1.tex
pdflatex $1.tex
evince $1.pdf &

## Cleanup
rm *.aux
rm *.log
rm *.bbl
rm *.blg

**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 


**********************************************************************
This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(/usr/share/texlive/texmf-dist/tex/latex/tools/.tex
LaTeX2e <2021-11-15> patch level 1
L3 programming layer <2022-01-21> File ignored)
*
! Emergency stop.
<*> .tex
        
!  ==> Fatal error occurred, no output PDF file produced!
Transcript written on .log.
This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded 
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

bibtex: Need exactly one file argument.
Try `bibtex --help' for more information.
rm: cannot remove '*.aux': No such file or directory
rm: cannot remove '*.log': No such file or directory
rm: cannot remove '*.bbl': No such file or directory
rm: cannot remove '*.blg': No such file or directory

(process:8123): Gtk-WARNING **: 21:22:33.353: Locale not supported by C library.
	Using the fallback 'C' locale.
/home/mhasoba/snap/code/common/.cache/gio-modules/libgiolibproxy.so: cannot open shared object file: Permission denied
Failed to load module: /home/mhasoba/snap/code/common/.cache/gio-modules/libgiolibproxy.so

(evince:8123): Gtk-WARNING **: 21:22:33.382: Theme parsing error: gtk-keys.css:1:0: Failed to import: Error opening file /snap/code/151/usr/share/themes/Default/gtk-3.0/gtk-keys.css: Permission denied
Gtk-Message: 21:22:33.382: Failed to load module "canberra-gtk-module"
Gtk-Message: 21:22:33.382: Failed to load module "canberra-gtk-module"
/home/mhasoba/snap/code/common/.cache/gio-modules/libdconfsettings.so: cannot open shared object file: Permission denied
Failed to load module: /home/mhasoba/snap/code/common/.cache/gio-modules/libdconfsettings.so

** (evince:8123): WARNING **: 21:22:33.534: set_filenames: Error when getting information for file ?/home/mhasoba/Documents/Teaching/IC_CMEE/2023-24/Coursework/StudentRepos/BowenDuan_/week1/code/.pdf?: No such file or directory

======================================================================
Inspecting script file tiff2png.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Check if 'convert' command (ImageMagick) is available
if ! command -v convert &> /dev/null; then
    echo "Error: 'convert' command (ImageMagick) is not installed."
    exit 1
fi

# Check if there are .tif files in the current directory
if ! ls *.tif 1> /dev/null 2>&1; then
    echo "Error: No .tif files found in the current directory."
    exit 1
fi

# Original script functionality
for f in *.tif; do  
    echo "Converting $f"; 
    convert "$f" "$(basename "$f" .tif).png"; 
done


**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 


**********************************************************************
Error: No .tif files found in the current directory.

**********************************************************************

Code ran without errors

Time consumed = 0.00497s

======================================================================
Inspecting script file boilerplate.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Your Name your.login@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2019

echo -e "\nThis is a shell script! \n"

#exit

**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 


**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00330s

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#!/bin/bash

if [ $# -ne 3 ]
then
  echo "Error: Wrong number of imput"
  exit 1
fi

if [ ! -r "$1" ] || [ ! -r "$2" ]
then
  echo "Error: Check the file type and name"
  exit 1
fi


cat $1 > $3
cat $2 >> $3
echo "Merged File is"
cat $3
exit 0


# for example use the code below to test
# bash improved_ConcatenateTwoFiles.sh ../sandbox/test.txt ../sandbox/test2.txt ../sandbox/merge.txt


**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Error: Wrong number of imput

**********************************************************************

Code ran without errors

Time consumed = 0.00275s

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Bowen Duan bd623@imperial.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2019

if [ $# -ne 1 ]
then
    echo "Error: Wrong number of files."
    exit 1
fi

if [ ! -f $1 ]
then
    echo "Error: File '$1' not found."
    exit 1
fi

echo "Creating a comma delimited version of '$1' ..."
cat "$1" | tr -s "\t" "," >> "$1.csv"
echo "Done!"
exit 0


# for example use the code below to test
# bash improved_tabtocsv.sh ../sandbox/test.txt


**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
Error: Wrong number of files.

**********************************************************************

Code ran without errors

Time consumed = 0.00275s

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:

**********************************************************************
#!/bin/sh

MSG1="Hello"
MSG2=$USER
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo

**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 


**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00194s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:

**********************************************************************
@article{verhulst1838notice,
  title={Notice sur la loi que la population suit dans son accroissement},
  author={Verhulst, Pierre-Fran{\c{c}}ois},
  journal={Corresp. Math. Phys.},
  volume={10},
  pages={113--126},
  year={1838}
}

**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file variables.sh...

File contents are:

**********************************************************************
#!/bin/sh

## Illustrates the use of variables 

# Special variables

echo "This script was called with $# parameters"
echo "The script's name is $0"
echo "The arguments are $@"
echo "The first argument is $1"
echo "The second argument is $2"

# Assigned Variables; Explicit declaration:
MY_VAR='some string' 
echo 'the current value of the variable is:' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

## Assigned Variables; Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b '; Their sum is:'

## Assigned Variables; Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM

**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 


**********************************************************************
This script was called with 0 parameters
The script's name is variables.sh
The arguments are 
The first argument is 
The second argument is 
the current value of the variable is: some string

Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

expr: syntax error: missing argument after ‘+’

======================================================================
Inspecting script file CountLines.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Check if exactly one argument is provided
if [ $# -ne 1 ]; then
    echo "Error: Wrong number of arguments."
    echo "Usage: $0 <filename>"
    exit 1
fi

# Check if the file exists
if [ ! -f "$1" ]; then
    echo "Error: File '$1' not found."
    exit 1
fi

# Original script functionality
NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"
echo


**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 


**********************************************************************
Error: Wrong number of arguments.
Usage: CountLines.sh <filename>

**********************************************************************

Code ran without errors

Time consumed = 0.00354s

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************
# make sure now we are in the directory 'week1/code'

# Question: Is the above show the path properly(by declaring in the directory 'data')? or use #../data as a comment to be the path?

#1  
   #it is suitable to use the command 'wc -l your_file.fasta' there is an example below for the first fasta file
  
	cat ../data/407228326.fasta | wc -l && cat ../data/407228412.fasta | wc -l && cat ../data/E.coli.fasta | wc -l

   
  
#2
   # first method (this is the real answer)
	tail -n +2 ../data/E.coli.fasta
  

#3 
   # Count the length of genome E.coli
	tail -n +2 ../data/E.coli.fasta | tr -d '\n' | wc -c
  
#4 
   # Count the matches of a particular sequence, “ATGC” in the genome of E. coli	
 	tail -n +2 ../data/E.coli.fasta | tr -d '\n' | grep -o 'ATGC' | wc -l
 	
#5
	A=$(tail -n +2 ../data/E.coli.fasta | grep -o 'A' | wc -l)
	T=$(tail -n +2 ../data/E.coli.fasta | grep -o 'T' | wc -l)
	G=$(tail -n +2 ../data/E.coli.fasta | grep -o 'G' | wc -l)
	C=$(tail -n +2 ../data/E.coli.fasta | grep -o 'C' | wc -l)
	echo "scale=4; ($A+$T)/($G+$C)" | bc
	
   #Conclusion (as a note) : echo must use " " rather than ' ' .
                            #grep -v will output the file name , but 'tail' will not.

**********************************************************************

Testing UnixPrac1.txt...

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!
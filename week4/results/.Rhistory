log(e)
log(2.7)
log5(25)
log5(25)
log(exp(1))
pi
rm(list=ls())
d<-read.table("SparrowSize.txt", header=TRUE)
str(d)
d<-read.table(../data"SparrowSize.txt", header=TRUE)
str(d)
## what you see below might differ from what you will see in your r console –
## it differs by R version. Don’t be distracted by these.
d<-read.table("../data/SparrowSize.txt", header=TRUE)
str(d)
## what you see below might differ from what you will see in your r console –
## it differs by R version. Don’t be distracted by these.
d<-read.table("SparrowSize.txt", header=TRUE)
str(d)
d<-read.table("../data/SparrowSize.txt", header=TRUE)
str(d)
head(d)
summary(d)
head(d)
table(d$Year)
table(d$BIrdID)
table(d$BirdID)
table(table(d$BirdID))
rm(list==ls())
rm(list=ls())
require(dplyr)
## Loading required package: dplyr
##
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
## filter, lag
## The following objects are masked from 'package:base':
##
## intersect, setdiff, setequal, union
BirdIDCount <- d %>% count(BirdID,BirdID, sort=TRUE)
BirdIDCount %>% count(n)
rm(list=ls())
require(dplyr)
## Loading required package: dplyr
##
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
## filter, lag
## The following objects are masked from 'package:base':
##
## intersect, setdiff, setequal, union
BirdIDCount <- d %>% count(BirdID,BirdID, sort=TRUE)
BirdIDCount %>% count(n)
d<-read.table("../data/SparrowSize.txt", header=TRUE)
require(dplyr)
##
## Attaching package: 'dplyr'
## The following objects are masked from 'package:stats':
##
## filter, lag
## The following objects are masked from 'package:base':
##
## intersect, setdiff, setequal, union
BirdIDCount <- d %>% count(BirdID,BirdID, sort=TRUE)
BirdIDCount %>% count(n)
head(d)
table(d$BirdID)
1.table(d$BirdID$Year)
library(dplyr)
d %>%
  group_by(BirdID, Year) %>%  # 按BirdID和Year分组
  summarise(repeats = n())   # 计算每个组合的数量
table(d$Sex)
library(dplyr)
d %>%
  group_by(Year,Sex) %>%
  summarise(d)
library(dplyr)
d %>%
  Capture_Indivials_Sex <- group_by(Year,Sex)
  Capture_Indivials_Sex
library(dplyr)
Capture_Indivials_Sex <- group_by(Year,Sex)
Capture_Indivials_Sex
library(dplyr)
Capture_Indivials_Sex <- select(Year,Sex)
Capture_Indivials_Sex
library(dplyr)
Capture_Indivials_Sex <- select(Year,Sex)
Capture_Indivials_Sex
library(dplyr)
Capture_Indivials_Sex <- select(d,Year,Sex)
Capture_Indivials_Sex
head(Capture_Indivials_Sex)
# Load required packages
library(tidyverse)
# Load the dataset
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
# Inspect the dataset
head(MyData)
dim(MyData)
str(MyData)
View(MyData) #you can also do this
View(MyMetaData)
# Transpose the dataset（No command we can replace the transpose 't' command)
MyData <- t(MyData) 
head(MyData)
dim(MyData)
# Replace species absences with zeros
MyData[MyData == ""] <- 0
# Convert raw matrix to data frame
TempData <- as.data.frame(MyData[-1,], stringsAsFactors = FALSE)
colnames(TempData) <- MyData[1,]
##################################################################
MyWrangledData <- TempData %>%
  gather(key = "Species", value = "Count", -c(Cultivation, Block, Plot, Quadrat)) %>%
  mutate(across(c(Cultivation, Block, Plot, Quadrat), as.factor),
         Count = as.integer(Count))
#########################################################################
# Convert from wide to long format (here use the 'pivot_longer' to replace the original 'melt')
#MyWrangledData <- TempData %>%
 # pivot_longer(cols = -c(Cultivation, Block, Plot, Quadrat),
  #             names_to = "Species",
   #            values_to = "Count") %>%
 # mutate(across(c(Cultivation, Block, Plot, Quadrat), as.factor),
  #       Count = as.integer(Count))
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
# Exploring the data (extend the script below)
# Continue your data exploration and analysis here using dplyr and tidyr functions
# Load required packages
library(tidyverse)
# Load the dataset
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
# Inspect the dataset
head(MyData)
dim(MyData)
str(MyData)
View(MyData) #you can also do this
View(MyMetaData)
# Transpose the dataset（No command we can replace the transpose 't' command)
MyData <- t(MyData) 
head(MyData)
dim(MyData)
# Replace species absences with zeros
MyData[MyData == ""] <- 0
# Convert raw matrix to data frame
TempData <- as.data.frame(MyData[-1,], stringsAsFactors = FALSE)
colnames(TempData) <- MyData[1,]
####################################################################################################
##########################################
# we can use gather() in the tidyverse and also pivot_longer() to replace melt() in the original code. I put the pivot_longer in the comment
MyWrangledData <- TempData %>%
  gather(key = "Species", value = "Count", -c(Cultivation, Block, Plot, Quadrat)) %>%
  mutate(across(c(Cultivation, Block, Plot, Quadrat), as.factor),
         Count = as.integer(Count))
######################################################################################################
# Convert from wide to long format (here use the 'pivot_longer' to replace the original 'melt')
#MyWrangledData <- TempData %>%
 # pivot_longer(cols = -c(Cultivation, Block, Plot, Quadrat),
  #             names_to = "Species",
   #            values_to = "Count") %>%
 # mutate(across(c(Cultivation, Block, Plot, Quadrat), as.factor),
  #       Count = as.integer(Count))
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
# Exploring the data (extend the script below)
# Continue your data exploration and analysis here using dplyr and tidyr functions
#install the sqlite package
install.packages('sqldf')
# To load the packages
library(sqldf)
# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')
# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")
# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")
# Once we have our table, we can query the results using:
dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")
# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.
Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R
# Import data frames into database
 dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)
# Check that the data have been correctly imported into the School table.
 dbListTables(db)                 # The tables in the database
 dbListFields(db,"Resource")       # The columns in a table
 dbReadTable(db, "Resource")    # The data in a table
# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
 dbDisconnect(db)            # Close connection
 rm(list = c("Resource"))   # Remove data frames
"CREATE TABLE Consumer
#install the sqlite package
install.packages('sqldf')
# To load the packages
library(sqldf)
# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')
# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")
# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")
# Once we have our table, we can query the results using:
dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")
# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.
Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R
# Import data frames into database
 dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)
# Check that the data have been correctly imported into the School table.
 dbListTables(db)                 # The tables in the database
 dbListFields(db,"Resource")       # The columns in a table
 dbReadTable(db, "Resource")    # The data in a table
# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
 dbDisconnect(db)            # Close connection
 rm(list = c("Resource"))   # Remove data frames
#install the sqlite package
install.packages('sqldf')
# To load the packages
library(sqldf)
# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')
# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")
# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")
# Once we have our table, we can query the results using:
dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")
# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.
Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R
# Import data frames into database
 dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)
# Check that the data have been correctly imported into the School table.
 dbListTables(db)                 # The tables in the database
 dbListFields(db,"Resource")       # The columns in a table
 dbReadTable(db, "Resource")    # The data in a table
# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
 dbDisconnect(db)            # Close connection
 rm(list = c("Resource"))   # Remove data frames
library(sqldf)
q()
# Load required packages
library(ggplot2)
library(dplyr)

# Set working directory (is can save all results in the 'results' directory)
setwd("../results")

# Load data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Create plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feed)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_grid(. ~ Life.Stage) +
  labs(title = "Predator-Prey Relationship by Feeding Type and Life Stage",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file
pdf("PP_Regress.pdf")
print(plot)
dev.off()

# Calculate regression results
results <- data %>%
  group_by(Feeding.Type, Life.Stage) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R = cor(log(Predator.mass), log(Prey.mass)),
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

# Load required packages
library(ggplot2)
library(dplyr)

# Set working directory (is can save all results in the 'results' directory)
setwd("../results")

# Load data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Create plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feed)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_grid(. ~ Life.Stage) +
  labs(title = "Predator-Prey Relationship by Feeding Type and Life Stage",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file
pdf("PP_Regress.pdf")
print(plot)
dev.off()

# Calculate regression results
results <- data %>%
  group_by(Feeding.Type, Life.Stage) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R = cor(log(Predator.mass), log(Prey.mass)),
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

# Load required packages
library(ggplot2)
library(dplyr)

# Set working directory to the 'results' directory
setwd("../results")

# Load data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Create plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feed)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_grid(Life.Stage ~ .) +
  labs(title = "Predator-Prey Relationship by Feeding Type and Life Stage",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
print(plot)
dev.off()

# Calculate regression results
results <- data %>%
  group_by(Feeding.Type, Life.Stage) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R = cor(log(Predator.mass), log(Prey.mass)),
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

# Load required packages
library(ggplot2)
library(dplyr)

# Set working directory to the 'results' directory
setwd("../results")

# Load data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Create plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feed)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Type",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
print(plot)
dev.off()

# Calculate regression results
results <- data %>%
  group_by(Feeding.Type) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R = cor(log(Predator.mass), log(Prey.mass)),
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

# Load required packages
library(ggplot2)
library(dplyr)

# Set working directory to the 'results' directory
setwd("../results")

# Load data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# Create plot
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
print(plot)
dev.off()

# Calculate regression results
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R = cor(log(Predator.mass), log(Prey.mass)),
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

R
print(R)
# Here are packages we need
library(ggplot2)
library(dplyr)

# Set working directory (setwd() will help me to save documents to the 'results' directory)
setwd("../results")

# read the csv
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# draw the plot use ggplot (not qplot)
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
# use print as the problem indicates
print(plot)
dev.off()

# Calculate regression results including slope, intercept, R, F_statistic, p value
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R = cor(log(Predator.mass), log(Prey.mass)),
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

R
# Here are packages we need
library(ggplot2)
library(dplyr)

# Set working directory (setwd() will help me to save documents to the 'results' directory)
setwd("../results")

# read the csv
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# draw the plot use ggplot (not qplot)
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
# use print as the problem indicates
print(plot)
dev.off()

# Calculate regression results including slope, intercept, R, F_statistic, p value
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R = cor(log(Predator.mass), log(Prey.mass)),
            print(R)
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

# Here are packages we need
library(ggplot2)
library(dplyr)

# Set working directory (setwd() will help me to save documents to the 'results' directory)
setwd("../results")

# read the csv
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# draw the plot use ggplot (not qplot)
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
# use print as the problem indicates
print(plot)
dev.off()

# Calculate regression results including slope, intercept, R, F_statistic, p value
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R = cor(log(Predator.mass), log(Prey.mass)),
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

# Here are packages we need
library(ggplot2)
library(dplyr)

# Set working directory (setwd() will help me to save documents to the 'results' directory)
setwd("../results")

# read the csv
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# draw the plot use ggplot (not qplot)
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
# use print as the problem indicates
print(plot)
dev.off()

# Calculate regression results including slope, intercept, R, F_statistic, p value
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R = (cor(log(Predator.mass), log(Prey.mass)))^2,
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

# Here are packages we need
library(ggplot2)
library(dplyr)

# Set working directory (setwd() will help me to save documents to the 'results' directory)
setwd("../results")

# read the csv
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")

# draw the plot use ggplot (not qplot)
plot <- ggplot(data, aes(x = log(Prey.mass), y = log(Predator.mass), color = Type.of.feeding.interaction)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Predator-Prey Relationship by Feeding Interaction",
       x = "Log Prey Mass",
       y = "Log Predator Mass")

# Save plot to pdf file in the 'results' directory
pdf("PP_Regress.pdf")
# use print as the problem indicates
print(plot)
dev.off()

# Calculate regression results including slope, intercept, R, F_statistic, p value
results <- data %>%
  group_by(Type.of.feeding.interaction) %>%
  summarize(slope = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[2],
            intercept = coef(lm(log(Predator.mass) ~ log(Prey.mass)))[1],
            R_Square = (cor(log(Predator.mass), log(Prey.mass)))^2,
            F_statistic = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[1],
            p_value = summary(lm(log(Predator.mass) ~ log(Prey.mass)))$fstatistic[4])

# Save regression results to csv file in the 'results' directory
write.csv(results, file = "PP_Regress_Results.csv", row.names = FALSE)

install.packages("maps")
q()

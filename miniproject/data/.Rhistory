> install.packages("minpack.lm") 
 install.packages("minpack.lm") 
# 读取数据集
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")

# 创建一个空的数据框来存储拟合结果
fit_results <- data.frame()

# 遍历每个唯一的ID
for (unique_id in unique(data_subset$ID)) {
  
  # 从子集中选择当前ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  
  # 拟合线性模型
  linear_model <- lm(PopBio ~ Time, data = subset_data)
  
  # 拟合二次多项式
  quadratic_model <- lm(PopBio ~ poly(Time, 2), data = subset_data)
  
  # 拟合三次多项式
  cubic_model <- lm(PopBio ~ poly(Time, 3), data = subset_data)
  
  # 计算AIC、BIC、R_squared等指标，并构建数据框
  model_info <- data.frame(
    ID = unique_id,
    AIC_linear = AIC(linear_model),
    BIC_linear = BIC(linear_model),
    R_squared_linear = summary(linear_model)$r.squared,
    AIC_quadratic = AIC(quadratic_model),
    BIC_quadratic = BIC(quadratic_model),
    R_squared_quadratic = summary(quadratic_model)$r.squared,
    AIC_cubic = AIC(cubic_model),
    BIC_cubic = BIC(cubic_model),
    R_squared_cubic = summary(cubic_model)$r.squared
  )
  
  # 将当前模型的信息添加到结果数据框中
  fit_results <- rbind(fit_results, model_info)
}

# 将结果导出到CSV
write.csv(fit_results, file = "../data/model_fitting_results.csv", row.names = FALSE)

# 打印拟合结果
#print(fit_results)

############从这里开始拟合Logistics 模型###################################################################################################################3
logistic1 <- function(t, r, K, N0){
 N0 * K * exp(r * t)/(K+N0 * (exp(r * t)-1))
}
# 引入 minpack.lm 包
library(minpack.lm)

# 遍历每个唯一的ID，进行 Logistic 模型拟合
for (unique_id in unique(data_subset$ID)) {
  
  # 从子集中选择当前ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  
  # 设置初始值
  N_0_start <- min(subset_data$PopBio)  # lowest population size
  K_start <- max(subset_data$PopBio)  # highest population size
  r_max_start <- 0.1  # 请根据你的数据调整这个值
  
  # 使用非线性最小二乘法进行Logistic模型拟合
  fit_logistic <- nlsLM(PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                        start = list(r = r_max_start, K = K_start, N0 = N_0_start),
                        control = nls.lm.control(maxiter = 100))  # 设置控制参数，根据需要调整
  
  # 提取拟合结果的相关信息
  model_info_logistic <- data.frame(
    ID = unique_id,
    AIC_logistic = AIC(fit_logistic),
    BIC_logistic = BIC(fit_logistic),
    RSS_logistic = sum(residuals(fit_logistic)^2),  # 计算 Residual sum of squares
    TSS_logistic = sum((subset_data$PopBio - mean(subset_data$PopBio))^2),  # 计算 Total sum of squares
    R_squared_logistic = 1 - (sum(residuals(fit_logistic)^2) / sum((subset_data$PopBio - mean(subset_data$PopBio))^2))  # 计算 R-squared
  )
  
  # 将当前模型的信息添加到结果数据框中
  fit_results <- rbind(fit_results, model_info_logistic)
}

# 将 Logistic 模型结果追加到CSV
write.csv(fit_results, file = "../data/model_fitting_results.csv", append = TRUE, row.names = FALSE, col.names = !file.exists("../data/model_fitting_results.csv"))

# 读取数据集
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")

# 创建一个空的数据框来存储拟合结果
fit_results <- data.frame()

# 遍历每个唯一的ID
for (unique_id in unique(data_subset$ID)) {
  
  # 从子集中选择当前ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  
  # 拟合线性模型
  linear_model <- lm(PopBio ~ Time, data = subset_data)
  
  # 拟合二次多项式
  quadratic_model <- lm(PopBio ~ poly(Time, 2), data = subset_data)
  
  # 拟合三次多项式
  cubic_model <- lm(PopBio ~ poly(Time, 3), data = subset_data)
  
  # 计算AIC、BIC、R_squared等指标，并构建数据框
  model_info <- data.frame(
    ID = unique_id,
    AIC_linear = AIC(linear_model),
    BIC_linear = BIC(linear_model),
    R_squared_linear = summary(linear_model)$r.squared,
    AIC_quadratic = AIC(quadratic_model),
    BIC_quadratic = BIC(quadratic_model),
    R_squared_quadratic = summary(quadratic_model)$r.squared,
    AIC_cubic = AIC(cubic_model),
    BIC_cubic = BIC(cubic_model),
    R_squared_cubic = summary(cubic_model)$r.squared
  )
  
  # 将当前模型的信息添加到结果数据框中
  fit_results <- rbind(fit_results, model_info)
}

# 将结果导出到CSV
write.csv(fit_results, file = "../data/model_fitting_results.csv", row.names = FALSE)

# 打印拟合结果
#print(fit_results)

############从这里开始拟合Logistics 模型###################################################################################################################3
logistic1 <- function(t, r, K, N0){
 N0 * K * exp(r * t)/(K+N0 * (exp(r * t)-1))
}
# 引入 minpack.lm 包
library(minpack.lm)

# 遍历每个唯一的ID，进行 Logistic 模型拟合
for (unique_id in unique(data_subset$ID)) {
  
  # 从子集中选择当前ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  
  # 设置初始值
  N_0_start <- min(subset_data$PopBio)  # lowest population size
  K_start <- max(subset_data$PopBio)  # highest population size
  r_max_start <- 0.1  # 请根据你的数据调整这个值
  
  # 使用非线性最小二乘法进行Logistic模型拟合
  fit_logistic <- nlsLM(PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                        start = list(r = r_max_start, K = K_start, N0 = N_0_start),
                        control = nls.lm.control(maxiter = 100))  # 设置控制参数，根据需要调整
  
  # 提取拟合结果的相关信息
  model_info_logistic <- data.frame(
    ID = unique_id,
    AIC_logistic = AIC(fit_logistic),
    BIC_logistic = BIC(fit_logistic),
    RSS_logistic = sum(residuals(fit_logistic)^2),  # 计算 Residual sum of squares
    TSS_logistic = sum((subset_data$PopBio - mean(subset_data$PopBio))^2),  # 计算 Total sum of squares
    R_squared_logistic = 1 - (sum(residuals(fit_logistic)^2) / sum((subset_data$PopBio - mean(subset_data$PopBio))^2))  # 计算 R-squared
  )
  
  # 将当前模型的信息添加到结果数据框中
  fit_results <- rbind(fit_results, model_info_logistic)
}

# 将 Logistic 模型结果追加到CSV
write.csv(fit_results, file = "../data/model_fitting_results.csv", append = TRUE, row.names = FALSE, col.names = !file.exists("../data/model_fitting_results.csv"))

q()

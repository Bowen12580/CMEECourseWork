  params_linear <- coef(linear_model)
  p <- p + geom_line(aes(x = Time, y = predict(linear_model, newdata = subset_data)), color = "yellow")
  # 添加二次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(quadratic_model, newdata = subset_data)), color = "green")
  # 添加三次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(cubic_model, newdata = subset_data)), color = "orange")
  # 添加Logistic模型拟合线（如果拟合成功）
  if (!is.null(fit_results_logistic[[unique_id]])) {
    params_logistic <- coef(fit_results_logistic[[unique_id]])
    p <- p + geom_line(aes(x = Time, y = predict(fit_results_logistic[[unique_id]], newdata = subset_data)), color = "blue")
  }
  save_path <- paste0("../results/plot_", unique_id, ".png")
  # 保存图表到文件
  ggsave(save_path, p, width = 8, height = 6) 
  # 打印图表
  print(p)
}
# 引入必要的包
library(minpack.lm)
library(ggplot2)
# 读取数据
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")
# 定义Gompertz模型
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1))
}
# 定义Logistic模型
logistic1 <- function(t, r, K, N0) {
  N0 * K * exp(r * t)/(K + N0 * (exp(r * t) - 1))
}
# 创建一个空列表用来存储Gompertz模型拟合结果
fit_results_gompertz <- list()
# 创建一个空列表用来存储Logistic模型拟合结果
fit_results_logistic <- list()
# 创建一个空列表用来存储线性模型拟合结果
fit_results_linear <- list()
# 创建一个空列表用来存储二次多项式模型拟合结果
fit_results_quadratic <- list()
# 创建一个空列表用来存储三次多项式模型拟合结果
fit_results_cubic <- list()
# 对每个唯一的ID进行迭代
for (unique_id in unique(data_subset$ID)) {
  # 选取特定ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)
  # 拟合线性模型，使用 log(PopBio + 1)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  fit_results_linear[[unique_id]] <- linear_model
  # 拟合二次多项式
  quadratic_model <- lm(log_PopBio ~ poly(Time, 2), data = subset_data)
  fit_results_quadratic[[unique_id]] <- quadratic_model
  # 拟合三次多项式
  cubic_model <- lm(log_PopBio ~ poly(Time, 3), data = subset_data)
  fit_results_cubic[[unique_id]] <- cubic_model
  # 尝试拟合Logistic模型
  fit_logistic <- try(nlsLM(log_PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                            start = list(r = 0.1, K = max(subset_data$log_PopBio), N0 = min(subset_data$log_PopBio)),
                            control = nls.lm.control(maxiter = 10000)), silent = TRUE)
  if (class(fit_logistic) != "try-error") {
    fit_results_logistic[[unique_id]] <- fit_logistic
  }
  # 绘图
  p <- ggplot(subset_data, aes(x = Time, y = log_PopBio)) +
    geom_point() +
    ggtitle(paste("Data and Model Fits for ID:", unique_id)) +
    xlab("Time") +
    ylab("Log(Abundance)")
  # 添加线性模型拟合线（如果拟合成功）
  params_linear <- coef(linear_model)
  p <- p + geom_line(aes(x = Time, y = predict(linear_model, newdata = subset_data)), color = "yellow")
  # 添加二次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(quadratic_model, newdata = subset_data)), color = "green")
  # 添加三次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(cubic_model, newdata = subset_data)), color = "orange")
  # 添加Logistic模型拟合线（如果拟合成功）
  if (!is.null(fit_results_logistic[[unique_id]])) {
    params_logistic <- coef(fit_results_logistic[[unique_id]])
    p <- p + geom_line(aes(x = Time, y = predict(fit_results_logistic[[unique_id]], newdata = subset_data)), color = "blue")
  }
  # 打印图表
  print(p)
}
# 引入必要的包
library(minpack.lm)
library(ggplot2)
# 读取数据
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")
# 定义Gompertz模型
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1))
}
# 定义Logistic模型
logistic1 <- function(t, r, K, N0) {
  N0 * K * exp(r * t)/(K + N0 * (exp(r * t) - 1))
}
# 创建一个空列表用来存储Gompertz模型拟合结果
fit_results_gompertz <- list()
# 创建一个空列表用来存储Logistic模型拟合结果
fit_results_logistic <- list()
# 创建一个空列表用来存储线性模型拟合结果
fit_results_linear <- list()
# 创建一个空列表用来存储二次多项式模型拟合结果
fit_results_quadratic <- list()
# 创建一个空列表用来存储三次多项式模型拟合结果
fit_results_cubic <- list()
# 对每个唯一的ID进行迭代
for (unique_id in unique(data_subset$ID)) {
  # 选取特定ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)
  # 拟合线性模型，使用 log(PopBio + 1)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  fit_results_linear[[unique_id]] <- linear_model
  # 拟合二次多项式
  quadratic_model <- lm(log_PopBio ~ poly(Time, 2), data = subset_data)
  fit_results_quadratic[[unique_id]] <- quadratic_model
  # 拟合三次多项式
  cubic_model <- lm(log_PopBio ~ poly(Time, 3), data = subset_data)
  fit_results_cubic[[unique_id]] <- cubic_model
  # 尝试拟合Logistic模型
  fit_logistic <- try(nlsLM(log_PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                            start = list(r = 0.1, K = max(subset_data$log_PopBio), N0 = min(subset_data$log_PopBio)),
                            control = nls.lm.control(maxiter = 10000)), silent = TRUE)
  if (class(fit_logistic) != "try-error") {
    fit_results_logistic[[unique_id]] <- fit_logistic
  }
  # 绘图
  p <- ggplot(subset_data, aes(x = Time, y = log_PopBio)) +
    geom_point() +
    ggtitle(paste("Data and Model Fits for ID:", unique_id)) +
    xlab("Time") +
    ylab("Log(Abundance)")
  # 添加线性模型拟合线（如果拟合成功）
  params_linear <- coef(linear_model)
  p <- p + geom_line(aes(x = Time, y = predict(linear_model, newdata = subset_data)), color = "yellow")
  # 添加二次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(quadratic_model, newdata = subset_data)), color = "green")
  # 添加三次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(cubic_model, newdata = subset_data)), color = "orange")
  # 添加Logistic模型拟合线（如果拟合成功）
  if (!is.null(fit_results_logistic[[unique_id]])) {
    params_logistic <- coef(fit_results_logistic[[unique_id]])
    p <- p + geom_line(aes(x = Time, y = predict(fit_results_logistic[[unique_id]], newdata = subset_data)), color = "blue")
  }
  save_path <- paste0("../results/plot_", unique_id, ".png")
  # 保存图表到文件
  ggsave(save_path, p, width = 8, height = 6) 
  # 打印图表
  print(p)
}
# 引入必要的包
library(minpack.lm)
library(ggplot2)
# 读取数据
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")
# 定义Gompertz模型
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1))
}
# 定义Logistic模型
logistic1 <- function(t, r, K, N0) {
  N0 * K * exp(r * t)/(K + N0 * (exp(r * t) - 1))
}
# 创建一个空列表用来存储Gompertz模型拟合结果
fit_results_gompertz <- list()
# 创建一个空列表用来存储Logistic模型拟合结果
fit_results_logistic <- list()
# 创建一个空列表用来存储线性模型拟合结果
fit_results_linear <- list()
# 创建一个空列表用来存储二次多项式模型拟合结果
fit_results_quadratic <- list()
# 创建一个空列表用来存储三次多项式模型拟合结果
fit_results_cubic <- list()
# 对每个唯一的ID进行迭代
for (unique_id in unique(data_subset$ID)) {
  # 选取特定ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)
  # 拟合线性模型，使用 log(PopBio + 1)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  fit_results_linear[[unique_id]] <- linear_model
  # 拟合二次多项式
  quadratic_model <- lm(log_PopBio ~ poly(Time, 2), data = subset_data)
  fit_results_quadratic[[unique_id]] <- quadratic_model
  # 拟合三次多项式
  cubic_model <- lm(log_PopBio ~ poly(Time, 3), data = subset_data)
  fit_results_cubic[[unique_id]] <- cubic_model
  # 尝试拟合Logistic模型
  fit_logistic <- try(nlsLM(log_PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                            start = list(r = 0.1, K = max(subset_data$log_PopBio), N0 = min(subset_data$log_PopBio)),
                            control = nls.lm.control(maxiter = 10000)), silent = TRUE)
  if (class(fit_logistic) != "try-error") {
    fit_results_logistic[[unique_id]] <- fit_logistic
  }
  # 绘图
  p <- ggplot(subset_data, aes(x = Time, y = log_PopBio)) +
    geom_point() +
    ggtitle(paste("Data and Model Fits for ID:", unique_id)) +
    xlab("Time") +
    ylab("Log(Abundance)")
  # 添加线性模型拟合线（如果拟合成功）
  params_linear <- coef(linear_model)
  p <- p + geom_line(aes(x = Time, y = predict(linear_model, newdata = subset_data)), color = "yellow")
  # 添加二次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(quadratic_model, newdata = subset_data)), color = "green")
  # 添加三次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(cubic_model, newdata = subset_data)), color = "orange")
  # 添加Logistic模型拟合线（如果拟合成功）
  if (!is.null(fit_results_logistic[[unique_id]])) {
    params_logistic <- coef(fit_results_logistic[[unique_id]])
    p <- p + geom_line(aes(x = Time, y = predict(fit_results_logistic[[unique_id]], newdata = subset_data)), color = "blue")
  }
  #save_path <- paste0("../results/plot_", unique_id, ".png")
  # 保存图表到文件
  #ggsave(save_path, p, width = 8, height = 6) 
  # 打印图表
  print(p)
}
# 引入必要的包
library(minpack.lm)
library(ggplot2)
# 读取数据
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")
# 定义Gompertz模型
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1))
}
# 定义Logistic模型
logistic1 <- function(t, r, K, N0) {
  N0 * K * exp(r * t)/(K + N0 * (exp(r * t) - 1))
}
# 创建一个空列表用来存储Gompertz模型拟合结果
fit_results_gompertz <- list()
# 创建一个空列表用来存储Logistic模型拟合结果
fit_results_logistic <- list()
# 创建一个空列表用来存储线性模型拟合结果
fit_results_linear <- list()
# 创建一个空列表用来存储二次多项式模型拟合结果
fit_results_quadratic <- list()
# 创建一个空列表用来存储三次多项式模型拟合结果
fit_results_cubic <- list()
# 对每个唯一的ID进行迭代
for (unique_id in unique(data_subset$ID)) {
  # 选取特定ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)
  # 拟合线性模型，使用 log(PopBio + 1)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  fit_results_linear[[unique_id]] <- linear_model
  # 拟合二次多项式
  quadratic_model <- lm(log_PopBio ~ poly(Time, 2), data = subset_data)
  fit_results_quadratic[[unique_id]] <- quadratic_model
  # 拟合三次多项式
  cubic_model <- lm(log_PopBio ~ poly(Time, 3), data = subset_data)
  fit_results_cubic[[unique_id]] <- cubic_model
  # 尝试拟合Logistic模型
  fit_logistic <- try(nlsLM(log_PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                            start = list(r = 0.1, K = max(subset_data$log_PopBio), N0 = min(subset_data$log_PopBio)),
                            control = nls.lm.control(maxiter = 10000)), silent = TRUE)
  if (class(fit_logistic) != "try-error") {
    fit_results_logistic[[unique_id]] <- fit_logistic
  }
  # 绘图
  p <- ggplot(subset_data, aes(x = Time, y = log_PopBio)) +
    geom_point() +
    ggtitle(paste("Data and Model Fits for ID:", unique_id)) +
    xlab("Time") +
    ylab("Log(Abundance)")
  # 添加线性模型拟合线（如果拟合成功）
  params_linear <- coef(linear_model)
  p <- p + geom_line(aes(x = Time, y = predict(linear_model, newdata = subset_data)), color = "yellow")
  # 添加二次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(quadratic_model, newdata = subset_data)), color = "green")
  # 添加三次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(cubic_model, newdata = subset_data)), color = "orange")
  # 添加Logistic模型拟合线（如果拟合成功）
  if (!is.null(fit_results_logistic[[unique_id]])) {
    params_logistic <- coef(fit_results_logistic[[unique_id]])
    p <- p + geom_line(aes(x = Time, y = predict(fit_results_logistic[[unique_id]], newdata = subset_data)), color = "blue")
  }
  #save_path <- paste0("../results/plot_", unique_id, ".png")
  # 保存图表到文件
  #ggsave(save_path, p, width = 8, height = 6) 
  # 打印图表
  print(p)
}
# 引入必要的包
library(minpack.lm)
library(ggplot2)
# 读取数据
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")
# 定义Gompertz模型
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1))
}
# 定义Logistic模型
logistic1 <- function(t, r, K, N0) {
  N0 * K * exp(r * t)/(K + N0 * (exp(r * t) - 1))
}
# 对每个唯一的ID进行迭代
for (unique_id in unique(data_subset$ID)) {
  # 选取特定ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)
  # 拟合线性模型，使用 log(PopBio + 1)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  # 拟合二次多项式
  quadratic_model <- lm(log_PopBio ~ poly(Time, 2), data = subset_data)
  # 拟合三次多项式
  cubic_model <- lm(log_PopBio ~ poly(Time, 3), data = subset_data)
  # 尝试拟合Logistic模型
  fit_logistic <- try(nlsLM(log_PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                            start = list(r = 0.1, K = max(subset_data$log_PopBio), N0 = min(subset_data$log_PopBio)),
                            control = nls.lm.control(maxiter = 10000)), silent = TRUE)
  # 创建一个空图形
  q <- qplot(x = subset_data$Time, y = subset_data$log_PopBio, geom = "point",
             main = paste("Data and Model Fits for ID:", unique_id),
             xlab = "Time", ylab = "Log(Abundance)")
  # 添加线性模型拟合线（如果拟合成功）
  params_linear <- coef(linear_model)
  q <- q + geom_line(aes(x = subset_data$Time, y = predict(linear_model, newdata = subset_data)), color = "yellow")
  # 添加二次多项式拟合线（如果拟合成功）
  q <- q + geom_line(aes(x = subset_data$Time, y = predict(quadratic_model, newdata = subset_data)), color = "green")
  # 添加三次多项式拟合线（如果拟合成功）
  q <- q + geom_line(aes(x = subset_data$Time, y = predict(cubic_model, newdata = subset_data)), color = "orange")
  # 添加Logistic模型拟合线（如果拟合成功）
  if (!is.null(fit_logistic) && class(fit_logistic) != "try-error") {
    params_logistic <- coef(fit_logistic)
    q <- q + geom_line(aes(x = subset_data$Time, y = predict(fit_logistic, newdata = subset_data)), color = "blue")
  }
  # 打印图表
  print(q)
}
# 引入必要的包
library(minpack.lm)
library(ggplot2)
# 读取数据
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")
# 定义Gompertz模型
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1))
}
# 定义Logistic模型
logistic1 <- function(t, r, K, N0) {
  N0 * K * exp(r * t)/(K + N0 * (exp(r * t) - 1))
}
# 对每个唯一的ID进行迭代
for (unique_id in unique(data_subset$ID)) {
  # 选取特定ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)
  # 拟合线性模型，使用 log(PopBio + 1)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  # 拟合二次多项式
  quadratic_model <- lm(log_PopBio ~ poly(Time, 2), data = subset_data)
  # 拟合三次多项式
  cubic_model <- lm(log_PopBio ~ poly(Time, 3), data = subset_data)
  # 尝试拟合Logistic模型
  fit_logistic <- try(nlsLM(log_PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                            start = list(r = 0.1, K = max(subset_data$log_PopBio), N0 = min(subset_data$log_PopBio)),
                            control = nls.lm.control(maxiter = 10000)), silent = TRUE)
  # 创建一个空图形
  q <- qplot(x = subset_data$Time, y = subset_data$log_PopBio, geom = "point",
             main = paste("Data and Model Fits for ID:", unique_id),
             xlab = "Time", ylab = "Log(Abundance)")
  # 添加线性模型拟合线（如果拟合成功）
  params_linear <- coef(linear_model)
  q <- q + geom_line(aes(x = subset_data$Time, y = predict(linear_model, newdata = subset_data)), color = "yellow")
  # 添加二次多项式拟合线（如果拟合成功）
  q <- q + geom_line(aes(x = subset_data$Time, y = predict(quadratic_model, newdata = subset_data)), color = "green")
  # 添加三次多项式拟合线（如果拟合成功）
  q <- q + geom_line(aes(x = subset_data$Time, y = predict(cubic_model, newdata = subset_data)), color = "orange")
  # 添加Logistic模型拟合线（如果拟合成功）
  if (!is.null(fit_logistic) && class(fit_logistic) != "try-error") {
    params_logistic <- coef(fit_logistic)
    q <- q + geom_line(aes(x = subset_data$Time, y = predict(fit_logistic, newdata = subset_data)), color = "blue")
  }
  # 保存图表到文件
  save_path <- paste0("../results/plot_", unique_id, ".png")
  ggsave(save_path, q, width = 8, height = 6)
  # 打印图表
  print(q)
}
# 引入必要的包
library(minpack.lm)
library(ggplot2)
# 读取数据
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")
# 定义Gompertz模型
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1))
}
# 定义Logistic模型
logistic1 <- function(t, r, K, N0) {
  N0 * K * exp(r * t)/(K + N0 * (exp(r * t) - 1))
}
# 创建一个空列表用来存储Gompertz模型拟合结果
fit_results_gompertz <- list()
# 创建一个空列表用来存储Logistic模型拟合结果
fit_results_logistic <- list()
# 创建一个空列表用来存储线性模型拟合结果
fit_results_linear <- list()
# 创建一个空列表用来存储二次多项式模型拟合结果
fit_results_quadratic <- list()
# 创建一个空列表用来存储三次多项式模型拟合结果
fit_results_cubic <- list()
# 对每个唯一的ID进行迭代
for (unique_id in unique(data_subset$ID)) {
  # 选取特定ID的数据
  subset_data <- subset(data_subset, ID == unique_id)
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)
  # 拟合线性模型，使用 log(PopBio + 1)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  fit_results_linear[[unique_id]] <- linear_model
  # 拟合二次多项式
  quadratic_model <- lm(log_PopBio ~ poly(Time, 2), data = subset_data)
  fit_results_quadratic[[unique_id]] <- quadratic_model
  # 拟合三次多项式
  cubic_model <- lm(log_PopBio ~ poly(Time, 3), data = subset_data)
  fit_results_cubic[[unique_id]] <- cubic_model
  # 尝试拟合Logistic模型
  fit_logistic <- try(nlsLM(log_PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                            start = list(r = 0.1, K = max(subset_data$log_PopBio), N0 = min(subset_data$log_PopBio)),
                            control = nls.lm.control(maxiter = 10000)), silent = TRUE)
  if (class(fit_logistic) != "try-error") {
    fit_results_logistic[[unique_id]] <- fit_logistic
  }
  # 绘图
  p <- ggplot(subset_data, aes(x = Time, y = log_PopBio)) +
    geom_point() +
    ggtitle(paste("Data and Model Fits for ID:", unique_id)) +
    xlab("Time") +
    ylab("Log(Abundance)")
  # 添加线性模型拟合线（如果拟合成功）
  params_linear <- coef(linear_model)
  p <- p + geom_line(aes(x = Time, y = predict(linear_model, newdata = subset_data)), color = "yellow")
  # 添加二次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(quadratic_model, newdata = subset_data)), color = "green")
  # 添加三次多项式拟合线（如果拟合成功）
  p <- p + geom_line(aes(x = Time, y = predict(cubic_model, newdata = subset_data)), color = "orange")
  # 添加Logistic模型拟合线（如果拟合成功）
  if (!is.null(fit_results_logistic[[unique_id]])) {
    params_logistic <- coef(fit_results_logistic[[unique_id]])
    p <- p + geom_line(aes(x = Time, y = predict(fit_results_logistic[[unique_id]], newdata = subset_data)), color = "blue")
  }
  #save_path <- paste0("../results/plot_", unique_id, ".png")
  # 保存图表到文件
  #ggsave(save_path, p, width = 8, height = 6) 
  # 打印图表
  print(p)
}
# Load the minpack.lm package
library(minpack.lm)
data_subset <- read.csv("../data/LogisticGrowthData_subset.csv")
# ----------------------------------------
# Gompertz model fitting
# ----------------------------------------
# Define the Gompertz model
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}
# Create an empty data frame to store the fitting results
fit_results_gompertz <- data.frame()
# Iterate over each unique ID
for (unique_id in unique(data_subset$ID)) {
  # Select data for a specific ID
  subset_data <- subset(data_subset, ID == unique_id)
  # Log-transform the PopBio variable
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)
  # Use linear regression to find initial values
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  r_max_start <- coef(linear_model)["Time"]
  t_lag_start <- subset_data$Time[which.max(diff(diff(subset_data$log_PopBio)))]
  # Find initial values for N0 and K
  N0_start <- min(subset_data$log_PopBio)
  K_start <- max(subset_data$log_PopBio)
  # Use non-linear least squares to fit the Gompertz model
  fit_gompertz <- try(nlsLM(log_PopBio ~ gompertz_model(t=Time, r_max, K, N0, t_lag), data = subset_data,
                            start = list(r_max = r_max_start, K = K_start, N0 = N0_start, t_lag = t_lag_start)),
                      silent = TRUE)
  # Extract and calculate model statistics
  if (class(fit_gompertz) != "try-error") {
    RSS_gompertz <- sum(residuals(fit_gompertz)^2)
    TSS_gompertz <- sum((subset_data$log_PopBio - mean(subset_data$log_PopBio))^2)
    R_squared_gompertz <- 1 - (RSS_gompertz / TSS_gompertz)
    model_info_gompertz <- data.frame(
      ID = unique_id,
      AIC_gompertz = AIC(fit_gompertz),
      BIC_gompertz = BIC(fit_gompertz),
      RSS_gompertz = RSS_gompertz,
      TSS_gompertz = TSS_gompertz,
      R_squared_gompertz = R_squared_gompertz
    )
  } else {
    model_info_gompertz <- data.frame(
      ID = unique_id,
      AIC_gompertz = NA,
      BIC_gompertz = NA,
      RSS_gompertz = NA,
      TSS_gompertz = NA,
      R_squared_gompertz = NA
    )
  }
  # Add the current model information to the results data frame
  fit_results_gompertz <- rbind(fit_results_gompertz, model_info_gompertz)
}
# Export the results to CSV
write.csv(fit_results_gompertz, file = "../data/model_fitting_results_gompertz.csv", row.names = FALSE)
q()
# Load the minpack.lm package
library(minpack.lm)

# ----------------------------------------
# Linear, Quadratic, Cubic Polynomial Model Fitting
# ----------------------------------------

# Read the dataset
data_subset <- read.csv("../results/LogisticGrowthData_subset.csv")

# Create an empty data frame to store fitting results
fit_results_polynomial <- data.frame()

# Iterate over each unique ID
for (unique_id in unique(data_subset$ID)) {
  # Select data for the current ID
  subset_data <- subset(data_subset, ID == unique_id)

  # Log-transform PopBio and add 1
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)

  # Fit linear model using log(PopBio + 1)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)

  # Fit quadratic model
  quadratic_model <- lm(log_PopBio ~ poly(Time, 2), data = subset_data)

  # Fit cubic model
  cubic_model <- lm(log_PopBio ~ poly(Time, 3), data = subset_data)

  # Calculate AIC, BIC, R_squared, etc., and construct a data frame
  model_info <- data.frame(
    ID = unique_id,
    AIC_linear = AIC(linear_model),
    BIC_linear = BIC(linear_model),
    R_squared_linear = summary(linear_model)$r.squared,
    AIC_quadratic = AIC(quadratic_model),
    BIC_quadratic = BIC(quadratic_model),
    R_squared_quadratic = summary(quadratic_model)$r.squared,
    AIC_cubic = AIC(cubic_model),
    BIC_cubic = BIC(cubic_model),
    R_squared_cubic = summary(cubic_model)$r.squared
  )

  # Add current model information to the results data frame
  fit_results_polynomial <- rbind(fit_results_polynomial, model_info)
}

# Export results to CSV
write.csv(fit_results_polynomial, file = "../results/model_fitting_results_polynomial.csv", row.names = FALSE)

# ----------------------------------------
# Logistic Model Fitting
# ----------------------------------------

# Define the Logistic model
logistic1 <- function(t, r, K, N0) {
  N0 * K * exp(r * t)/(K + N0 * (exp(r * t) - 1))
}

# Create an empty data frame to store fitting results
fit_results_logistic <- data.frame()

# Iterate over each unique ID
for (unique_id in unique(data_subset$ID)) {
  # Select data for the current ID
  subset_data <- subset(data_subset, ID == unique_id)

  # Log-transform PopBio and add 1
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)

  # Use linear regression to find the initial value for r (maximum slope)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  r_max_start <- coef(linear_model)["Time"]

  # Use non-linear least squares for Logistic model fitting
  fit_logistic <- nlsLM(log_PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
                        start = list(r = r_max_start, K = max(subset_data$log_PopBio), N0 = min(subset_data$log_PopBio)),
                        control = nls.lm.control(maxiter = 10000))

  # Extract relevant information from the fitting results
  model_info_logistic <- data.frame(
    ID = unique_id,
    AIC_logistic = AIC(fit_logistic),
    BIC_logistic = BIC(fit_logistic),
    RSS_logistic = sum(residuals(fit_logistic)^2),
    TSS_logistic = sum((subset_data$log_PopBio - mean(subset_data$log_PopBio))^2),
    R_squared_logistic = 1 - (sum(residuals(fit_logistic)^2) / sum((subset_data$log_PopBio - mean(subset_data$log_PopBio))^2))
  )

  # Add current model information to the results data frame
  fit_results_logistic <- rbind(fit_results_logistic, model_info_logistic)
}

# Export results to CSV
write.csv(fit_results_logistic, file = "../results/model_fitting_results_logistic.csv", row.names = FALSE)

# Load the minpack.lm package
library(minpack.lm)

data_subset <- read.csv("../results/LogisticGrowthData_subset.csv")

# ----------------------------------------
# Gompertz model fitting
# ----------------------------------------

# Define the Gompertz model
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  return(N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1)))
}

# Create an empty data frame to store the fitting results
fit_results_gompertz <- data.frame()

# Iterate over each unique ID
for (unique_id in unique(data_subset$ID)) {
  # Select data for a specific ID
  subset_data <- subset(data_subset, ID == unique_id)

  # Log-transform the PopBio variable
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)

  # Use linear regression to find initial values
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  r_max_start <- coef(linear_model)["Time"]
  t_lag_start <- subset_data$Time[which.max(diff(diff(subset_data$log_PopBio)))]

  # Find initial values for N0 and K
  N0_start <- min(subset_data$log_PopBio)
  K_start <- max(subset_data$log_PopBio)

  # Use non-linear least squares to fit the Gompertz model
  fit_gompertz <- try(nlsLM(log_PopBio ~ gompertz_model(t=Time, r_max, K, N0, t_lag), data = subset_data,
                            start = list(r_max = r_max_start, K = K_start, N0 = N0_start, t_lag = t_lag_start)),
                      silent = TRUE)

  # Extract and calculate model statistics
  if (class(fit_gompertz) != "try-error") {
    RSS_gompertz <- sum(residuals(fit_gompertz)^2)
    TSS_gompertz <- sum((subset_data$log_PopBio - mean(subset_data$log_PopBio))^2)
    R_squared_gompertz <- 1 - (RSS_gompertz / TSS_gompertz)

    model_info_gompertz <- data.frame(
      ID = unique_id,
      AIC_gompertz = AIC(fit_gompertz),
      BIC_gompertz = BIC(fit_gompertz),
      RSS_gompertz = RSS_gompertz,
      TSS_gompertz = TSS_gompertz,
      R_squared_gompertz = R_squared_gompertz
    )
  } else {
    model_info_gompertz <- data.frame(
      ID = unique_id,
      AIC_gompertz = NA,
      BIC_gompertz = NA,
      RSS_gompertz = NA,
      TSS_gompertz = NA,
      R_squared_gompertz = NA
    )
  }

  # Add the current model information to the results data frame
  fit_results_gompertz <- rbind(fit_results_gompertz, model_info_gompertz)
}

# Export the results to CSV
write.csv(fit_results_gompertz, file = "../results/model_fitting_results_gompertz.csv", row.names = FALSE)

# Load necessary packages
library(minpack.lm)
library(ggplot2)

# Read the data
data_subset <- read.csv("../results/LogisticGrowthData_subset.csv")

# Define the Gompertz model
gompertz_model <- function(t, r_max, K, N_0, t_lag) {
  N_0 + (K - N_0) * exp(-exp(r_max * exp(1) * (t_lag - t)/((K - N_0) * log(10)) + 1))
}

# Define the Logistic model
logistic1 <- function(t, r, K, N0) {
  N0 * K * exp(r * t)/(K + N0 * (exp(r * t) - 1))
}

# Create empty lists to store Gompertz and Logistic model fitting results
fit_results_gompertz <- list()
fit_results_logistic <- list()

# Create empty lists to store linear, quadratic, and cubic model fitting results
fit_results_linear <- list()
fit_results_quadratic <- list()
fit_results_cubic <- list()

# Iterate over each unique ID
for (unique_id in unique(data_subset$ID)) {
  # Select data for the specific ID
  subset_data <- subset(data_subset, ID == unique_id)
  subset_data$log_PopBio <- log(subset_data$PopBio + 1)

  # Fit linear model using log(PopBio + 1)
  linear_model <- lm(log_PopBio ~ Time, data = subset_data)
  fit_results_linear[[unique_id]] <- linear_model

  # Fit quadratic model
  quadratic_model <- lm(log_PopBio ~ poly(Time, 2), data = subset_data)
  fit_results_quadratic[[unique_id]] <- quadratic_model

  # Fit cubic model
  cubic_model <- lm(log_PopBio ~ poly(Time, 3), data = subset_data)
  fit_results_cubic[[unique_id]] <- cubic_model

  # Try fitting the Logistic model
  fit_logistic <- try(
    nlsLM(log_PopBio ~ logistic1(Time, r, K, N0), data = subset_data,
          start = list(r = 0.1, K = max(subset_data$log_PopBio), N0 = min(subset_data$log_PopBio)),
          control = nls.lm.control(maxiter = 10000)), silent = TRUE)
  if (class(fit_logistic) != "try-error") {
    fit_results_logistic[[unique_id]] <- fit_logistic
  }

  # Create a ggplot for visualization
  p <- ggplot(subset_data, aes(x = Time, y = log_PopBio)) +
    geom_point() +
    ggtitle(paste("Data and Model Fits for ID:", unique_id)) +
    xlab("Time") +
    ylab("Log(Abundance)")

  # Add linear model fit line (if successful)
  params_linear <- coef(linear_model)
  p <- p + geom_line(aes(x = Time, y = predict(linear_model, newdata = subset_data)), color = "yellow")

  # Add quadratic model fit line (if successful)
  p <- p + geom_line(aes(x = Time, y = predict(quadratic_model, newdata = subset_data)), color = "green")

  # Add cubic model fit line (if successful)
  p <- p + geom_line(aes(x = Time, y = predict(cubic_model, newdata = subset_data)), color = "orange")

  # Add Logistic model fit line (if successful)
  if (!is.null(fit_results_logistic[[unique_id]])) {
    params_logistic <- coef(fit_results_logistic[[unique_id]])
    p <- p + geom_line(aes(x = Time, y = predict(fit_results_logistic[[unique_id]], newdata = subset_data)), color = "blue")
  }

  # Save the plot to a file (path commented out)
  #save_path <- paste0("../results/plot_", unique_id, ".png")
  #ggsave(save_path, p, width = 8, height = 6) 

  # Print the plot
  print(p)
}

